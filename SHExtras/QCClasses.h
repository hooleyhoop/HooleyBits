/*
 *     Generated by class-dump 3.1.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2005 by Steve Nygard.
 */



@class GFPort, GFGraphEditorView, GFGraphView, QCPatchRuntime, QCContext, QCGLPort_ZBuffer, QCGLImagePort, QCKeyboardTableView, QCGLPort_Culling, QCBooleanPort, QCProxyPort, QCGLPort_Color, QCGLPort_Image, CIFilter, QCGLPort_Blending, QCPBuffer, QCSplineView, CIKernel, CIImageAccumulator, CIVector,
 GFNodeManagerView, QCNumberPort, QCInspector, QCGLObject, GFGraph, GFList;

struct CGContext;

struct CGImage;

struct CGPDFPage;

struct _CGDirectDisplayID;

struct _CGLPBufferObject;

struct _CGLPixelFormatObject;

struct _CGLPrivateObject;

struct _NSZone;

struct __CFArray;

struct __CFDateFormatter;

struct __CFDictionary;

struct __CFNetServiceBrowser;

struct __CFRunLoop;

struct __CFRunLoopTimer;

struct __CVBuffer;

struct __CVOpenGLTextureCache;

struct __GLIContextRec;

struct __GLIFunctionDispatchRec {
    void *accum;
    void *alpha_func;
    void *are_textures_resident;
    void *array_element;
    void *begin;
    void *bind_texture;
    void *bitmap;
    void *blend_func;
    void *call_list;
    void *call_lists;
    void *clear;
    void *clear_accum;
    void *clear_color;
    void *clear_depth;
    void *clear_index;
    void *clear_stencil;
    void *clip_plane;
    void *color3b;
    void *color3bv;
    void *color3d;
    void *color3dv;
    void *color3f;
    void *color3fv;
    void *color3i;
    void *color3iv;
    void *color3s;
    void *color3sv;
    void *color3ub;
    void *color3ubv;
    void *color3ui;
    void *color3uiv;
    void *color3us;
    void *color3usv;
    void *color4b;
    void *color4bv;
    void *color4d;
    void *color4dv;
    void *color4f;
    void *color4fv;
    void *color4i;
    void *color4iv;
    void *color4s;
    void *color4sv;
    void *color4ub;
    void *color4ubv;
    void *color4ui;
    void *color4uiv;
    void *color4us;
    void *color4usv;
    void *color_mask;
    void *color_material;
    void *color_pointer;
    void *copy_pixels;
    void *copy_tex_image1D;
    void *copy_tex_image2D;
    void *copy_tex_sub_image1D;
    void *copy_tex_sub_image2D;
    void *cull_face;
    void *delete_lists;
    void *delete_textures;
    void *depth_func;
    void *depth_mask;
    void *depth_range;
    void *disable;
    void *disable_client_state;
    void *draw_arrays;
    void *draw_buffer;
    void *draw_elements;
    void *draw_pixels;
    void *edge_flag;
    void *edge_flag_pointer;
    void *edge_flagv;
    void *enable;
    void *enable_client_state;
    void *end;
    void *end_list;
    void *eval_coord1d;
    void *eval_coord1dv;
    void *eval_coord1f;
    void *eval_coord1fv;
    void *eval_coord2d;
    void *eval_coord2dv;
    void *eval_coord2f;
    void *eval_coord2fv;
    void *eval_mesh1;
    void *eval_mesh2;
    void *eval_point1;
    void *eval_point2;
    void *feedback_buffer;
    void *finish;
    void *flush;
    void *fogf;
    void *fogfv;
    void *fogi;
    void *fogiv;
    void *front_face;
    void *frustum;
    void *gen_lists;
    void *gen_textures;
    void *get_booleanv;
    void *get_clip_plane;
    void *get_doublev;
    void *get_error;
    void *get_floatv;
    void *get_integerv;
    void *get_lightfv;
    void *get_lightiv;
    void *get_mapdv;
    void *get_mapfv;
    void *get_mapiv;
    void *get_materialfv;
    void *get_materialiv;
    void *get_pixel_mapfv;
    void *get_pixel_mapuiv;
    void *get_pixel_mapusv;
    void *get_pointerv;
    void *get_polygon_stipple;
    void *get_string;
    void *get_tex_envfv;
    void *get_tex_enviv;
    void *get_tex_gendv;
    void *get_tex_genfv;
    void *get_tex_geniv;
    void *get_tex_image;
    void *get_tex_level_parameterfv;
    void *get_tex_level_parameteriv;
    void *get_tex_parameterfv;
    void *get_tex_parameteriv;
    void *hint;
    void *index_mask;
    void *index_pointer;
    void *indexd;
    void *indexdv;
    void *indexf;
    void *indexfv;
    void *indexi;
    void *indexiv;
    void *indexs;
    void *indexsv;
    void *indexub;
    void *indexubv;
    void *init_names;
    void *interleaved_arrays;
    void *is_enabled;
    void *is_list;
    void *is_texture;
    void *light_modelf;
    void *light_modelfv;
    void *light_modeli;
    void *light_modeliv;
    void *lightf;
    void *lightfv;
    void *lighti;
    void *lightiv;
    void *line_stipple;
    void *line_width;
    void *list_base;
    void *load_identity;
    void *load_matrixd;
    void *load_matrixf;
    void *load_name;
    void *logic_op;
    void *map1d;
    void *map1f;
    void *map2d;
    void *map2f;
    void *map_grid1d;
    void *map_grid1f;
    void *map_grid2d;
    void *map_grid2f;
    void *materialf;
    void *materialfv;
    void *materiali;
    void *materialiv;
    void *matrix_mode;
    void *mult_matrixd;
    void *mult_matrixf;
    void *new_list;
    void *normal3b;
    void *normal3bv;
    void *normal3d;
    void *normal3dv;
    void *normal3f;
    void *normal3fv;
    void *normal3i;
    void *normal3iv;
    void *normal3s;
    void *normal3sv;
    void *normal_pointer;
    void *ortho;
    void *pass_through;
    void *pixel_mapfv;
    void *pixel_mapuiv;
    void *pixel_mapusv;
    void *pixel_storef;
    void *pixel_storei;
    void *pixel_transferf;
    void *pixel_transferi;
    void *pixel_zoom;
    void *point_size;
    void *polygon_mode;
    void *polygon_offset;
    void *polygon_stipple;
    void *pop_attrib;
    void *pop_client_attrib;
    void *pop_matrix;
    void *pop_name;
    void *prioritize_textures;
    void *push_attrib;
    void *push_client_attrib;
    void *push_matrix;
    void *push_name;
    void *raster_pos2d;
    void *raster_pos2dv;
    void *raster_pos2f;
    void *raster_pos2fv;
    void *raster_pos2i;
    void *raster_pos2iv;
    void *raster_pos2s;
    void *raster_pos2sv;
    void *raster_pos3d;
    void *raster_pos3dv;
    void *raster_pos3f;
    void *raster_pos3fv;
    void *raster_pos3i;
    void *raster_pos3iv;
    void *raster_pos3s;
    void *raster_pos3sv;
    void *raster_pos4d;
    void *raster_pos4dv;
    void *raster_pos4f;
    void *raster_pos4fv;
    void *raster_pos4i;
    void *raster_pos4iv;
    void *raster_pos4s;
    void *raster_pos4sv;
    void *read_buffer;
    void *read_pixels;
    void *rectd;
    void *rectdv;
    void *rectf;
    void *rectfv;
    void *recti;
    void *rectiv;
    void *rects;
    void *rectsv;
    void *render_mode;
    void *rotated;
    void *rotatef;
    void *scaled;
    void *scalef;
    void *scissor;
    void *select_buffer;
    void *shade_model;
    void *stencil_func;
    void *stencil_mask;
    void *stencil_op;
    void *tex_coord1d;
    void *tex_coord1dv;
    void *tex_coord1f;
    void *tex_coord1fv;
    void *tex_coord1i;
    void *tex_coord1iv;
    void *tex_coord1s;
    void *tex_coord1sv;
    void *tex_coord2d;
    void *tex_coord2dv;
    void *tex_coord2f;
    void *tex_coord2fv;
    void *tex_coord2i;
    void *tex_coord2iv;
    void *tex_coord2s;
    void *tex_coord2sv;
    void *tex_coord3d;
    void *tex_coord3dv;
    void *tex_coord3f;
    void *tex_coord3fv;
    void *tex_coord3i;
    void *tex_coord3iv;
    void *tex_coord3s;
    void *tex_coord3sv;
    void *tex_coord4d;
    void *tex_coord4dv;
    void *tex_coord4f;
    void *tex_coord4fv;
    void *tex_coord4i;
    void *tex_coord4iv;
    void *tex_coord4s;
    void *tex_coord4sv;
    void *tex_coord_pointer;
    void *tex_envf;
    void *tex_envfv;
    void *tex_envi;
    void *tex_enviv;
    void *tex_gend;
    void *tex_gendv;
    void *tex_genf;
    void *tex_genfv;
    void *tex_geni;
    void *tex_geniv;
    void *tex_image1D;
    void *tex_image2D;
    void *tex_parameterf;
    void *tex_parameterfv;
    void *tex_parameteri;
    void *tex_parameteriv;
    void *tex_sub_image1D;
    void *tex_sub_image2D;
    void *translated;
    void *translatef;
    void *vertex2d;
    void *vertex2dv;
    void *vertex2f;
    void *vertex2fv;
    void *vertex2i;
    void *vertex2iv;
    void *vertex2s;
    void *vertex2sv;
    void *vertex3d;
    void *vertex3dv;
    void *vertex3f;
    void *vertex3fv;
    void *vertex3i;
    void *vertex3iv;
    void *vertex3s;
    void *vertex3sv;
    void *vertex4d;
    void *vertex4dv;
    void *vertex4f;
    void *vertex4fv;
    void *vertex4i;
    void *vertex4iv;
    void *vertex4s;
    void *vertex4sv;
    void *vertex_pointer;
    void *viewport;
    void *blend_func_separate;
    void *blend_color;
    void *blend_equation;
    void *lock_arrays_EXT;
    void *unlock_arrays_EXT;
    void *client_active_texture;
    void *active_texture;
    void *multi_tex_coord1d;
    void *multi_tex_coord1dv;
    void *multi_tex_coord1f;
    void *multi_tex_coord1fv;
    void *multi_tex_coord1i;
    void *multi_tex_coord1iv;
    void *multi_tex_coord1s;
    void *multi_tex_coord1sv;
    void *multi_tex_coord2d;
    void *multi_tex_coord2dv;
    void *multi_tex_coord2f;
    void *multi_tex_coord2fv;
    void *multi_tex_coord2i;
    void *multi_tex_coord2iv;
    void *multi_tex_coord2s;
    void *multi_tex_coord2sv;
    void *multi_tex_coord3d;
    void *multi_tex_coord3dv;
    void *multi_tex_coord3f;
    void *multi_tex_coord3fv;
    void *multi_tex_coord3i;
    void *multi_tex_coord3iv;
    void *multi_tex_coord3s;
    void *multi_tex_coord3sv;
    void *multi_tex_coord4d;
    void *multi_tex_coord4dv;
    void *multi_tex_coord4f;
    void *multi_tex_coord4fv;
    void *multi_tex_coord4i;
    void *multi_tex_coord4iv;
    void *multi_tex_coord4s;
    void *multi_tex_coord4sv;
    void *load_transpose_matrixd;
    void *load_transpose_matrixf;
    void *mult_transpose_matrixd;
    void *mult_transpose_matrixf;
    void *compressed_tex_image3D;
    void *compressed_tex_image2D;
    void *compressed_tex_image1D;
    void *compressed_tex_sub_image3D;
    void *compressed_tex_sub_image2D;
    void *compressed_tex_sub_image1D;
    void *get_compressed_tex_image;
    void *secondary_color3b;
    void *secondary_color3bv;
    void *secondary_color3d;
    void *secondary_color3dv;
    void *secondary_color3f;
    void *secondary_color3fv;
    void *secondary_color3i;
    void *secondary_color3iv;
    void *secondary_color3s;
    void *secondary_color3sv;
    void *secondary_color3ub;
    void *secondary_color3ubv;
    void *secondary_color3ui;
    void *secondary_color3uiv;
    void *secondary_color3us;
    void *secondary_color3usv;
    void *secondary_color_pointer;
    void *vertex_array_range_EXT;
    void *flush_vertex_array_range_EXT;
    void *draw_range_elements;
    void *color_table;
    void *color_table_parameterfv;
    void *color_table_parameteriv;
    void *copy_color_table;
    void *get_color_table;
    void *get_color_table_parameterfv;
    void *get_color_table_parameteriv;
    void *color_sub_table;
    void *copy_color_sub_table;
    void *convolution_filter1D;
    void *convolution_filter2D;
    void *convolution_parameterf;
    void *convolution_parameterfv;
    void *convolution_parameteri;
    void *convolution_parameteriv;
    void *copy_convolution_filter1D;
    void *copy_convolution_filter2D;
    void *get_convolution_filter;
    void *get_convolution_parameterfv;
    void *get_convolution_parameteriv;
    void *get_separable_filter;
    void *separable_filter2D;
    void *get_histogram;
    void *get_histogram_parameterfv;
    void *get_histogram_parameteriv;
    void *get_minmax;
    void *get_minmax_parameterfv;
    void *get_minmax_parameteriv;
    void *histogram;
    void *minmax;
    void *reset_histogram;
    void *reset_minmax;
    void *tex_image3D;
    void *tex_sub_image3D;
    void *copy_tex_sub_image3D;
    void *combiner_parameterfv_NV;
    void *combiner_parameterf_NV;
    void *combiner_parameteriv_NV;
    void *combiner_parameteri_NV;
    void *combiner_input_NV;
    void *combiner_output_NV;
    void *final_combiner_input_NV;
    void *get_combiner_input_parameterfv_NV;
    void *get_combiner_input_parameteriv_NV;
    void *get_combiner_output_parameterfv_NV;
    void *get_combiner_output_parameteriv_NV;
    void *get_final_combiner_input_parameterfv_NV;
    void *get_final_combiner_input_parameteriv_NV;
    void *combiner_stage_parameterfv_NV;
    void *get_combiner_stage_parameterfv_NV;
    void *texture_range_APPLE;
    void *get_tex_parameter_pointerv_APPLE;
    void *blend_equation_separate_EXT;
    void *sample_coverage;
    void *sample_pass;
    void *pn_trianglesi_ATI;
    void *pn_trianglesf_ATI;
    void *gen_fences_APPLE;
    void *delete_fences_APPLE;
    void *set_fence_APPLE;
    void *is_fence_APPLE;
    void *test_fence_APPLE;
    void *finish_fence_APPLE;
    void *test_object_APPLE;
    void *finish_object_APPLE;
    void *bind_program_ARB;
    void *delete_programs_ARB;
    void *gen_programs_ARB;
    void *is_program_ARB;
    void *vertex_attrib1s_ARB;
    void *vertex_attrib1f_ARB;
    void *vertex_attrib1d_ARB;
    void *vertex_attrib2s_ARB;
    void *vertex_attrib2f_ARB;
    void *vertex_attrib2d_ARB;
    void *vertex_attrib3s_ARB;
    void *vertex_attrib3f_ARB;
    void *vertex_attrib3d_ARB;
    void *vertex_attrib4s_ARB;
    void *vertex_attrib4f_ARB;
    void *vertex_attrib4d_ARB;
    void *vertex_attrib4Nub_ARB;
    void *vertex_attrib1sv_ARB;
    void *vertex_attrib1fv_ARB;
    void *vertex_attrib1dv_ARB;
    void *vertex_attrib2sv_ARB;
    void *vertex_attrib2fv_ARB;
    void *vertex_attrib2dv_ARB;
    void *vertex_attrib3sv_ARB;
    void *vertex_attrib3fv_ARB;
    void *vertex_attrib3dv_ARB;
    void *vertex_attrib4bv_ARB;
    void *vertex_attrib4sv_ARB;
    void *vertex_attrib4iv_ARB;
    void *vertex_attrib4ubv_ARB;
    void *vertex_attrib4usv_ARB;
    void *vertex_attrib4uiv_ARB;
    void *vertex_attrib4fv_ARB;
    void *vertex_attrib4dv_ARB;
    void *vertex_attrib4Nbv_ARB;
    void *vertex_attrib4Nsv_ARB;
    void *vertex_attrib4Niv_ARB;
    void *vertex_attrib4Nubv_ARB;
    void *vertex_attrib4Nusv_ARB;
    void *vertex_attrib4Nuiv_ARB;
    void *vertex_attrib_pointer_ARB;
    void *enable_vertex_attrib_array_ARB;
    void *disable_vertex_attrib_array_ARB;
    void *get_vertex_attribdv_ARB;
    void *get_vertex_attribfv_ARB;
    void *get_vertex_attribiv_ARB;
    void *get_vertex_attrib_pointerv_ARB;
    void *program_env_parameter4d_ARB;
    void *program_env_parameter4dv_ARB;
    void *program_env_parameter4f_ARB;
    void *program_env_parameter4fv_ARB;
    void *program_local_parameter4d_ARB;
    void *program_local_parameter4dv_ARB;
    void *program_local_parameter4f_ARB;
    void *program_local_parameter4fv_ARB;
    void *get_program_env_parameterdv_ARB;
    void *get_program_env_parameterfv_ARB;
    void *get_program_local_parameterdv_ARB;
    void *get_program_local_parameterfv_ARB;
    void *program_string_ARB;
    void *get_program_string_ARB;
    void *get_programiv_ARB;
    void *enable_vertex_attrib_ARB;
    void *disable_vertex_attrib_ARB;
    void *is_vertex_attrib_enabled_ARB;
    void *map_vertex_attrib1d_ARB;
    void *map_vertex_attrib1f_ARB;
    void *map_vertex_attrib2d_ARB;
    void *map_vertex_attrib2f_ARB;
    void *point_parameterf;
    void *point_parameterfv;
    void *point_parameteri;
    void *point_parameteriv;
    void *fog_coordf;
    void *fog_coordfv;
    void *fog_coordd;
    void *fog_coorddv;
    void *fog_coord_pointer;
    void *vertex_array_parameteri_EXT;
    void *bind_vertex_array_EXT;
    void *delete_vertex_arrays_EXT;
    void *gen_vertex_arrays_EXT;
    void *is_vertex_array_EXT;
    void *element_pointer_APPLE;
    void *draw_element_array_APPLE;
    void *draw_range_element_array_APPLE;
    void *weightbv_ARB;
    void *weightsv_ARB;
    void *weightiv_ARB;
    void *weightfv_ARB;
    void *weightdv_ARB;
    void *weightubv_ARB;
    void *weightusv_ARB;
    void *weightuiv_ARB;
    void *weight_pointer_ARB;
    void *vertex_blend_ARB;
    void *multi_draw_arrays;
    void *multi_draw_elements;
    void *window_pos2d;
    void *window_pos2dv;
    void *window_pos2f;
    void *window_pos2fv;
    void *window_pos2i;
    void *window_pos2iv;
    void *window_pos2s;
    void *window_pos2sv;
    void *window_pos3d;
    void *window_pos3dv;
    void *window_pos3f;
    void *window_pos3fv;
    void *window_pos3i;
    void *window_pos3iv;
    void *window_pos3s;
    void *window_pos3sv;
    void *active_stencil_face_EXT;
    void *stencil_op_separate_ATI;
    void *stencil_func_separate_ATI;
    void *flush_render_APPLE;
    void *finish_render_APPLE;
    void *swap_APPLE;
    void *delete_object_ARB;
    void *get_handle_ARB;
    void *detach_object_ARB;
    void *create_shader_object_ARB;
    void *shader_source_ARB;
    void *compile_shader_ARB;
    void *create_program_object_ARB;
    void *attach_object_ARB;
    void *link_program_ARB;
    void *use_program_object_ARB;
    void *validate_program_ARB;
    void *uniform1f_ARB;
    void *uniform2f_ARB;
    void *uniform3f_ARB;
    void *uniform4f_ARB;
    void *uniform1i_ARB;
    void *uniform2i_ARB;
    void *uniform3i_ARB;
    void *uniform4i_ARB;
    void *uniform1fv_ARB;
    void *uniform2fv_ARB;
    void *uniform3fv_ARB;
    void *uniform4fv_ARB;
    void *uniform1iv_ARB;
    void *uniform2iv_ARB;
    void *uniform3iv_ARB;
    void *uniform4iv_ARB;
    void *uniform_matrix2fv_ARB;
    void *uniform_matrix3fv_ARB;
    void *uniform_matrix4fv_ARB;
    void *get_object_parameterfv_ARB;
    void *get_object_parameteriv_ARB;
    void *get_info_log_ARB;
    void *get_attached_objects_ARB;
    void *get_uniform_location_ARB;
    void *get_active_uniform_ARB;
    void *get_uniformfv_ARB;
    void *get_uniformiv_ARB;
    void *get_shader_source_ARB;
    void *bind_attrib_location_ARB;
    void *get_active_attrib_ARB;
    void *get_attrib_location_ARB;
    void *pad;
    void *gen_queries;
    void *delete_queries;
    void *is_query;
    void *begin_query;
    void *end_query;
    void *get_queryiv;
    void *get_query_objectiv;
    void *get_query_objectuiv;
    void *bind_buffer;
    void *delete_buffers;
    void *gen_buffers;
    void *is_buffer;
    void *buffer_data;
    void *buffer_sub_data;
    void *get_buffer_sub_data;
    void *map_buffer;
    void *unmap_buffer;
    void *get_buffer_parameteriv;
    void *get_buffer_pointerv;
    void *depth_bounds_EXT;
    void *draw_buffers_ARB;
    void *is_shader;
    void *is_program;
    void *get_shaderiv;
    void *get_programiv;
    void *get_shader_info_log;
    void *get_program_info_log;
    void *stencil_func_separate;
    void *stencil_mask_separate;
    void *multi_draw_element_array_APPLE;
    void *multi_draw_range_element_array_APPLE;
    void *is_renderbuffer_EXT;
    void *bind_renderbuffer_EXT;
    void *delete_renderbuffers_EXT;
    void *gen_renderbuffers_EXT;
    void *renderbuffer_storage_EXT;
    void *get_renderbuffer_parameteriv_EXT;
    void *is_framebuffer_EXT;
    void *bind_framebuffer_EXT;
    void *delete_framebuffers_EXT;
    void *gen_framebuffers_EXT;
    void *check_framebuffer_status_EXT;
    void *framebuffer_texture1D_EXT;
    void *framebuffer_texture2D_EXT;
    void *framebuffer_texture3D_EXT;
    void *framebuffer_renderbuffer_EXT;
    void *get_framebuffer_attachment_parameteriv_EXT;
    void *generate_mipmap_EXT;
};

struct _CGLContextObject {
    struct __GLIContextRec *_field1;
    struct __GLIFunctionDispatchRec _field2;
    struct _CGLPrivateObject *_field3;
    void *_field4;
};

struct __QCSpline {
    double *_field1;
    double *_field2;
    int _field3;
    double *_field4;
    int _field5;
    int _field6;
};

typedef struct {
    float x;
    float y;
    float z;
} CDAnonymousStruct1;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    int _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
} CDAnonymousStruct2;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
} CDAnonymousStruct3;

typedef struct {
    float red;
    float green;
    float blue;
    float alpha;
} CDAnonymousStruct4;

typedef struct {
    float x;
    float y;
    float z;
    float w;
} CDAnonymousStruct5;

/*
 * File: ../../../Versions/A/QuartzComposer
 * Arch: PowerPC (ppc)
 *       Current version: 32.8.0, Compatibility version: 1.0.0
 */

@protocol GFConnection <NSObject>
- (id)sourcePort;
- (id)destinationPort;
- (id)attributes;
- (id)userInfo;
@end

@protocol GFNode <NSObject>
+ (id)attributesWithIdentifier:(id)fp8;
- (id)initWithIdentifier:(id)fp8;
- (id)inputPorts;
- (id)outputPorts;
- (id)attributes;
- (id)userInfo;
@end

@protocol GFGraph <GFNode>
- (BOOL)canAddNode:(id)fp8;
- (BOOL)addNode:(id)fp8;
- (void)removeNode:(id)fp8;
- (id)nodes;
- (BOOL)canConnectPort:(id)fp8 toPort:(id)fp12;
- (id)connectPort:(id)fp8 toPort:(id)fp12;
- (void)breakConnection:(id)fp8;
- (id)connections;
- (BOOL)canPublishPort:(id)fp8;
- (id)publishPort:(id)fp8;
- (void)unpublishPort:(id)fp8;
- (id)isPortPublished:(id)fp8;
@end

@protocol GFPlugInRegistration
+ (void)registerNodesWithManager:(id)fp8;
@end

@protocol GFPort <NSObject>
- (id)attributes;
- (id)userInfo;
@end

@protocol GFProxyPort <GFPort>
- (id)originalPort;
@end

@protocol GFState <NSObject>
- (id)state;
- (BOOL)setState:(id)fp8;
@end

@protocol QCGLPort
- (void)set:(struct _CGLContextObject *)fp8;
- (void)unset:(struct _CGLContextObject *)fp8;
@end

@interface GFConnection : NSObject <GFConnection, GFState>
{
    GFGraph *_owner;
    GFPort *_sourcePort;
    GFPort *_destPort;
    NSDictionary *_attributes;
    NSMutableDictionary *_userInfo;
    void *_unused[4];
}

- (id)init;
- (id)initWithGraph:(id)fp8 sourcePort:(id)fp12 destinationPort:(id)fp16 arguments:(id)fp20;
- (void)dealloc;
- (void)connectionWillDeleteFromGraph;
- (id)sourcePort;
- (id)destinationPort;
- (id)attributes;
- (id)userInfo;
- (id)graph;
- (id)state;
- (BOOL)setState:(id)fp8;
- (void)stateUpdated;
- (id)description;
- (id)key;

@end

@interface GFNode : NSObject <GFNode, NSCoding, NSCopying, GFState>
{
    GFList *_inputPorts;
    GFList *_outputPorts;
    GFGraph *_parent;
    NSString *_identifier;
    NSMutableDictionary *_userInfo;
    unsigned int _notificationsDisabled;
    unsigned int _notificationsPaused;
    GFList *_notificationsQueue;
    BOOL _portsUpdated;
    void *_unused[4];
}

+ (void)initialize;
+ (id)xmlAttributesWithIdentifier:(id)fp8;
+ (id)attributesWithIdentifier:(id)fp8;
+ (unsigned int)stateVersion;
+ (BOOL)createIvarPorts;
+ (id)nodeWithIdentifier:(id)fp8;
- (unsigned int)versionFromState:(id)fp8;
- (id)init;
- (void)__setValue:(id)fp8 forIvar:(const char *)fp12;
- (id)initWithIdentifier:(id)fp8;
- (void)_finalize_GFNode;
- (void)finalize;
- (void)dealloc;
- (id)identifier;
- (id)argumentsForIvarPortWithKey:(id)fp8;
- (id)createInputPortWithArguments:(id)fp8 forKey:(id)fp12;
- (id)createOutputPortWithArguments:(id)fp8 forKey:(id)fp12;
- (void)deleteInputPortForKey:(id)fp8;
- (void)deleteOutputPortForKey:(id)fp8;
- (id)userInfo;
- (id)inputPorts;
- (id)outputPorts;
- (id)ivarInputPorts;
- (id)ivarOutputPorts;
- (id)customInputPorts;
- (id)customOutputPorts;
- (BOOL)saveCustomInputPortStates:(id)fp8 toState:(id)fp12;
- (BOOL)saveCustomOutputPortStates:(id)fp8 toState:(id)fp12;
- (BOOL)restoreCustomInputPortStates:(id)fp8 fromState:(id)fp12;
- (BOOL)restoreCustomOutputPortStates:(id)fp8 fromState:(id)fp12;
- (id)xmlAttributes;
- (id)attributes;
- (id)description;
- (id)state;
- (BOOL)setState:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)portForKey:(id)fp8;
- (id)keyForPort:(id)fp8;
- (int)directionForPort:(id)fp8;
- (id)graph;
- (void)pauseNotifications;
- (void)resumeNotifications;
- (void)stateUpdated;
- (void)logMessage:(id)fp8;
- (void)debugMessage:(id)fp8;
- (id)key;
- (void)nodeDidAddToGraph:(id)fp8;
- (void)nodeWillRemoveFromGraph;

@end

@interface GFNode (Private)
+ (Class)_baseClass;
+ (Class)_listClass;
+ (id)_keyFromName:(id)fp8;
- (void)disableNotifications;
- (void)enableNotifications;
- (void)_logMessage:(id)fp8;
- (id)_inputPorts;
- (id)_outputPorts;
- (id)_baseKey;
- (BOOL)_isKeyInUse:(id)fp8;
- (id)_uniqueInputPortKey;
- (id)_uniqueOutputPortKey;
- (void)_portsUpdated;
- (void)_postNotification:(id)fp8 sender:(id)fp12;
- (id)_stateForPorts:(id)fp8;
- (BOOL)_setState:(id)fp8 forPorts:(id)fp12;
- (id)_portsFromList:(id)fp8 withSetFlags:(unsigned int)fp12 unsetFlags:(unsigned int)fp16;
@end

@interface GFGraph : GFNode <GFGraph>
{
    GFList *_nodes;
    GFList *_connections;
    BOOL _finalizing;
    void *_unused2[4];
}

- (void)_finalize_GFGraph;
- (void)finalize;
- (void)dealloc;
- (BOOL)canAddNode:(id)fp8;
- (BOOL)addNode:(id)fp8 forKey:(id)fp12;
- (BOOL)addNode:(id)fp8;
- (void)removeNodeForKey:(id)fp8;
- (void)removeNode:(id)fp8;
- (id)nodes;
- (BOOL)canConnectPort:(id)fp8 toPort:(id)fp12;
- (id)argumentsForConnectionFromPort:(id)fp8 toPort:(id)fp12;
- (id)createConnectionFromPort:(id)fp8 toPort:(id)fp12 forKey:(id)fp16;
- (id)connectPort:(id)fp8 toPort:(id)fp12;
- (void)deleteConnectionForKey:(id)fp8;
- (void)breakConnection:(id)fp8;
- (id)connections;
- (id)nodeForKey:(id)fp8;
- (id)keyForNode:(id)fp8;
- (id)connectionForKey:(id)fp8;
- (id)keyForConnection:(id)fp8;
- (id)pathForNode:(id)fp8;
- (id)nodeForPath:(id)fp8;
- (id)pathForPort:(id)fp8;
- (id)portForPath:(id)fp8;
- (BOOL)canPublishPort:(id)fp8;
- (id)createProxyPortWithOriginalPort:(id)fp8 forKey:(id)fp12;
- (id)publishPort:(id)fp8;
- (void)deleteProxyPortForKey:(id)fp8;
- (void)unpublishPort:(id)fp8;
- (id)proxyPortForOriginalPort:(id)fp8;
- (id)isPortPublished:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;

@end

@interface GFGraph (Private)
+ (Class)_baseClass;
+ (Class)_proxyClass;
- (id)_uniqueProxyPortKeyFromPort:(id)fp8;
- (BOOL)_finalizing;
- (BOOL)_isKeyInUse:(id)fp8;
- (id)_uniqueKeyFromNode:(id)fp8;
- (id)_uniqueConnectionKey;
- (id)_connections;
- (id)_nodes;
- (void)_validateState;
- (void)_nodePortsLayoutDidChange:(id)fp8;
- (void)_layoutUpdated;
- (BOOL)_saveState:(id)fp8 filterTarget:(id)fp12 filterAction:(SEL)fp16;
- (id)__enumeratorForItems:(id)fp8;
- (BOOL)_loadState:(id)fp8;
@end

@interface GFNodeClassDescription : NSObject
{
    Class _class;
    GFList *_inputs;
    GFList *_outputs;
    BOOL _attributesInitialized;
    NSMutableDictionary *_attributes;
    NSMutableDictionary *_identifierAttributes;
}

- (id)initWithClass:(Class)fp8;
- (Class)class;
- (void)_initializeAttributes;
- (id)xmlAttributes;
- (id)xmlAttributesForNodeIdentifier:(id)fp8;
- (id)attributesForNodeIdentifier:(id)fp8;
- (id)attributesForInputPort:(id)fp8 nodeIdentifier:(id)fp12;
- (id)attributesForOutputPort:(id)fp8 nodeIdentifier:(id)fp12;
- (id)ivarInputPorts;
- (id)ivarOutputPorts;
- (void)dealloc;

@end

@interface GFNodeClassDescriptionRegistry : NSObject
{
}

+ (id)classDescriptionForClass:(Class)fp8;
+ (void)registerClassDescription:(id)fp8 forClass:(Class)fp12;

@end

@interface GFNodeManager : NSObject
{
    struct __CFArray *_registry;
    void *_unused[4];
}

+ (id)managerForNodeNamespace:(id)fp8;
+ (Class)nodeClassWithName:(id)fp8;
+ (id)nodeIdentifierWithName:(id)fp8;
+ (id)nodeAttributesWithName:(id)fp8;
+ (id)nodeInstanceWithName:(id)fp8;
+ (BOOL)nodeRegisteredWithName:(id)fp8;
+ (id)nodeNames;
- (id)init;
- (id)nodeNamespace;
- (void)registerNodeWithClass:(Class)fp8;
- (void)registerNodeWithClass:(Class)fp8 identifier:(id)fp12;
- (id)nodeNames;
- (id)nodeNamesContainingAttributes:(id)fp8;
- (id)nodeNamesMatchingAttributes:(id)fp8;
- (id)nodeNamesExcludingAttributes:(id)fp8;
- (void)loadPlugInAtPath:(id)fp8;
- (void)loadPlugInsInFolder:(id)fp8 withExtension:(id)fp12;
- (void)loadPlugInsInLibrary:(id)fp8 withExtension:(id)fp12;
- (id)description;

@end

@interface GFPort : NSObject <GFProxyPort, GFState>
{
    unsigned int _flags;
    GFNode *_owner;
    GFPort *_originalPort;
    NSDictionary *_attributes;
    NSMutableDictionary *_userInfo;
    void *_unused[4];
}

- (id)init;
- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (void)dealloc;
- (void)portWillDeleteFromNode;
- (id)node;
- (id)attributes;
- (id)userInfo;
- (id)state;
- (BOOL)setState:(id)fp8;
- (void)stateUpdated;
- (id)description;
- (id)key;
- (id)originalPort;

@end

@interface GFPort (Private)
- (unsigned int)_flags;
- (void)_setFlags:(unsigned int)fp8;
- (void)_unsetFlags:(unsigned int)fp8;
@end

@interface GFList : NSObject
{
    unsigned int _flags;
    unsigned int _capacity;
    unsigned int _count;
    id *_values;
    unsigned int *_hashValues;
    id *_keys;
    unsigned int *_hashKeys;
}

+ (id)list;
- (id)init;
- (id)initWithCapacity:(unsigned int)fp8;
- (id)initWithCapacity:(unsigned int)fp8 optionFlags:(unsigned int)fp12;
- (void)_finalize_GFList;
- (void)finalize;
- (void)dealloc;
- (unsigned int)count;
- (void)setObject:(id)fp8 forKey:(id)fp12;
- (void)insertObject:(id)fp8 atIndex:(unsigned int)fp12 forKey:(id)fp16;
- (void)addObject:(id)fp8 forKey:(id)fp12;
- (void)addEntriesFromList:(id)fp8;
- (void)addEntriesFromDictionary:(id)fp8;
- (void)removeAllObjects;
- (void)removeObject:(id)fp8;
- (void)removeObjectForKey:(id)fp8;
- (void)removeObjectAtIndex:(unsigned int)fp8;
- (id)objectForKey:(id)fp8;
- (id)keyForObject:(id)fp8;
- (id)objectAtIndex:(unsigned int)fp8;
- (unsigned int)indexOfObject:(id)fp8;
- (id)keyAtIndex:(unsigned int)fp8;
- (unsigned int)indexOfKey:(id)fp8;
- (id)description;
- (id)arrayOfKeys;
- (id)arrayOfObjects;
- (id)setOfObjects;
- (id)setOfKeys;
- (id)dictionary;
- (id)array;
- (void)_moveIndex:(unsigned int)fp8 toIndex:(unsigned int)fp12;
- (void)setIndex:(unsigned int)fp8 ofObject:(id)fp12;
- (void)_swapIndex:(unsigned int)fp8 withIndex:(unsigned int)fp12;
- (void)makeObjectsPerformSelector:(SEL)fp8;
- (void)makeObjectsPerformSelector:(SEL)fp8 withObject:(id)fp12;
- (void)sortUsingFunction:(void *)fp8 context:(void *)fp12;
- (void)applyFunction:(void *)fp8 context:(void *)fp12;
- (const id *)_values;
- (const id *)_keys;

@end

@interface GFSetEnumerator : NSObject
{
    id _objectBuffer[32];
    id *_objects;
    int _count;
    int _index;
}

+ (id)enumeratorWithSet:(id)fp8;
- (id)init;
- (id)initWithSet:(id)fp8;
- (void)dealloc;
- (BOOL)next;
- (id)nextObject;
- (id)object;
- (void)reset;
- (int)_index;
- (unsigned int)_count;

@end

@interface GFArrayEnumerator : NSObject
{
    id _objectBuffer[32];
    id *_objects;
    int _count;
    int _index;
}

+ (id)enumeratorWithArray:(id)fp8;
- (id)init;
- (id)initWithArray:(id)fp8;
- (void)dealloc;
- (BOOL)next;
- (id)nextObject;
- (id)object;
- (void)reset;
- (int)_index;
- (unsigned int)_count;

@end

@interface GFDictionaryEnumerator : NSObject
{
    id _keyBuffer[32];
    id _valueBuffer[32];
    id *_keys;
    id *_values;
    int _count;
    int _index;
}

+ (id)enumeratorWithDictionary:(id)fp8;
- (id)init;
- (id)initWithDictionary:(id)fp8;
- (void)dealloc;
- (BOOL)next;
- (id)nextKey;
- (id)nextObject;
- (id)key;
- (id)object;
- (void)reset;
- (int)_index;
- (unsigned int)_count;

@end

@interface NSSet (GFExtensions)
- (id)GFSetEnumerator;
@end

@interface NSArray (GFExtensions)
- (id)GFArrayEnumerator;
- (id)_makePropertyList:(BOOL)fp8;
- (id)_unmakePropertyList:(BOOL)fp8;
@end

@interface NSMutableDictionary (GFExtensions)
- (void)_mergeEntriesFromDictionary:(id)fp8 maxDepth:(unsigned int)fp12;
- (id)_stripDotEntries;
- (void)_setNullForKey:(id)fp8;
@end

@interface NSDictionary (GFExtensions)
- (id)GFDictionaryEnumerator;
- (id)_makePropertyList:(BOOL)fp8;
- (id)_unmakePropertyList:(BOOL)fp8;
@end

@interface GFGraphBrowserView : NSView
{
    NSView *_insideView;
    GFGraph *_rootGraph;
    GFGraphEditorView *_graphEditor;
    NSBrowser *_browser;
    GFNode *_currentNode;
    BOOL _displayNodes;
    void *_unused[4];
}

- (void)setCurrentNode:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)finalize;
- (void)dealloc;
- (BOOL)isOpaque;
- (int)browser:(id)fp8 numberOfRowsInColumn:(int)fp12;
- (void)browser:(id)fp8 willDisplayCell:(id)fp12 atRow:(int)fp16 column:(int)fp20;
- (void)setRootGraph:(id)fp8;
- (id)rootGraph;
- (id)currentNode;
- (void)__graphDidChange:(id)fp8;
- (void)setGraphEditor:(id)fp8;
- (id)graphEditor;
- (void)delete:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)copy:(id)fp8;
- (void)cut:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;

@end

@interface GFGraphBrowserView (Private)
+ (BOOL)_isGraph:(id)fp8;
- (void)_graphUpdated:(id)fp8;
- (unsigned int)_indexForNode:(id)fp8 inGraph:(id)fp12;
- (id)_nodeFromGraph:(id)fp8 atIndex:(unsigned int)fp12;
- (unsigned int)_nodesCountInGraph:(id)fp8;
- (id)_selectedNodeAtColumn:(unsigned int)fp8;
- (void)_setCurrentNode:(id)fp8;
- (void)_selectItem:(id)fp8;
- (BOOL)_getPathFromGraph:(id)fp8 toNode:(id)fp12 withBuffer:(id *)fp16;
- (id)_setPathWithBuffer:(id *)fp8;
- (void)_setDisplayNodes:(BOOL)fp8;
- (BOOL)_displayNodes;
- (void)_finishInitialization;
@end

@interface GFGraphEditorInspector : NSObject
{
    NSPanel *_panel;
    NSPopUpButton *_menu;
    NSTextField *_text;
    GFList *_views;
    NSView *_currentView;
    GFGraphEditorView *_graphEditor;
    GFNode *_targetNode;
    GFGraphView *_targetGraphView;
    void *_unused[4];
}

+ (id)sharedInspector;
- (id)init;
- (void)finalize;
- (void)dealloc;
- (void)cancelOperation:(id)fp8;
- (void)windowDidResize:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)show;
- (void)hide;
- (BOOL)isVisible;
- (void)__invalidateInspector:(id)fp8;
- (void)setGraphEditor:(id)fp8;
- (id)graphEditor;

@end

@interface GFGraphEditorInspector (Private)
- (id)_window;
- (void)_menuSelect:(id)fp8;
- (void)_previousPanel:(id)fp8;
- (void)_nextPanel:(id)fp8;
- (void)_loadViews:(id)fp8;
- (void)_reloadInspector;
@end

@interface GFGraphEditorView : NSView
{
    NSScrollView *_scrollView;
    float _zoomFactor;
    GFNodeManagerView *_nodeManager;
    void *_unused[4];
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)finalize;
- (void)dealloc;
- (BOOL)isOpaque;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (void)showGraphEditorInspector:(id)fp8;
- (void)printWithInfo:(id)fp8 showingPrintPanel:(BOOL)fp12;
- (void)setGraph:(id)fp8;
- (id)graph;
- (struct _NSSize)editorSize;
- (void)setEditorSize:(struct _NSSize)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)setGridStep:(unsigned int)fp8;
- (unsigned int)gridStep;
- (BOOL)drawsShadows;
- (void)setDrawsShadows:(BOOL)fp8;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (id)gridColor;
- (void)setGridColor:(id)fp8;
- (float)zoomFactor;
- (void)setZoomFactor:(float)fp8;
- (void)setTooltipDelay:(double)fp8;
- (double)tooltipDelay;
- (void)setNodeManager:(id)fp8;
- (id)nodeManager;

@end

@interface GFGraphEditorView (Private)
- (void)__instantiateNode:(id)fp8;
- (void)_setZoomFactor:(float)fp8;
- (void)_finishInitialization;
- (void)__contentUpdated:(id)fp8;
- (void)__selectionUpdated:(id)fp8;
- (void)_setGraphView:(id)fp8;
- (id)_graphView;
@end

@interface GFGraphView : NSView
{
    GFGraph *_graph;
    GFNode *_firstResponder;
    BOOL _drawsBackground;
    BOOL _drawsShadows;
    unsigned int _gridStep;
    NSColor *_backgroundColor;
    NSColor *_gridColor;
    double _tooltipDelay;
    BOOL _spaceDown;
    struct _NSRect _selectionBounds;
    struct _NSPoint _connectionStart;
    struct _NSPoint _connectionEnd;
    GFConnection *_connection;
    struct __CFRunLoopTimer *_tooltipTimer;
    BOOL _tooltipPending;
    struct _NSRect _tooltipBounds;
    GFNode *_tooltipNode;
    GFList *_nodeActorCache;
    GFGraphEditorView *_graphEditor;
    void *_unused[4];
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)_finalize_GFGraphView;
- (void)finalize;
- (void)dealloc;
- (BOOL)isOpaque;
- (BOOL)isFlipped;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)keyUp:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)rightMouseDown:(id)fp8;
- (void)otherMouseDown:(id)fp8;
- (void)scrollWheel:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)cut:(id)fp8;
- (void)duplicate:(id)fp8;
- (void)selectAll:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (struct _NSRect)adjustScroll:(struct _NSRect)fp8;
- (void)print:(id)fp8;
- (BOOL)knowsPageRange:(struct _NSRange *)fp8;
- (struct _NSRect)rectForPage:(int)fp8;
- (void)setBoundsOrigin:(struct _NSPoint)fp8;
- (void)setBoundsSize:(struct _NSSize)fp8;

@end

@interface GFGraph (GFGraphView)
- (Class)graphViewClass;
@end

@interface GFGraphView (ItemActions)
- (void)__validatePosition:(id)fp8 context:(void *)fp12;
- (void)__savePosition:(id)fp8 context:(void *)fp12;
- (void)__restorePosition:(id)fp8 context:(void *)fp12;
- (void)__saveSelection:(id)fp8 context:(void *)fp12;
- (void)__restoreSelection:(id)fp8 context:(void *)fp12;
- (void)__addToSelection:(id)fp8 context:(void *)fp12;
- (void)__removeFromSelection:(id)fp8 context:(void *)fp12;
- (void)__unionRect:(id)fp8 context:(void *)fp12;
- (void)__select:(id)fp8 context:(void *)fp12;
- (void)__deselect:(id)fp8 context:(void *)fp12;
- (void)__delete:(id)fp8 context:(void *)fp12;
- (void)__move:(id)fp8 context:(void *)fp12;
@end

@interface GFGraphView (Actions)
- (id)_createSubgraphFromSelection:(id)fp8;
- (void)_editParentGraph:(id)fp8;
@end

@interface GFGraphView (Private)
- (struct _NSPoint)_centerPoint;
- (void)_startTooltips;
- (void)_showTooltip;
- (void)_hideTooltip;
- (void)_updateTooltipsForMouseLocation:(struct _NSPoint)fp8;
- (void)_stopTooltips;
- (void)_drawGraph:(struct _NSRect)fp8 selectionRingColor:(id)fp24 selectionRingWidth:(float)fp28 nodeCount:(unsigned int)fp32 nodeList:(id *)fp36 connectionCount:(unsigned int)fp40 connectionList:(id *)fp44;
- (BOOL)_editNode:(id)fp8;
- (void)_printWithInfo:(id)fp8 showingPrintPanel:(BOOL)fp12;
- (BOOL)_setFirstResponderNode:(id)fp8;
- (void)_setGraphEditor:(id)fp8;
- (id)_graphEditor;
- (void)_validateNodePosition:(id)fp8;
- (void)_validateNodePositions;
- (BOOL)_addNode:(id)fp8 atPosition:(struct _NSPoint)fp12;
- (void)__stateUpdated:(id)fp8;
- (void)__layoutUpdated:(id)fp8;
- (void)__windowKey:(id)fp8;
- (void)_finishInitialization;
- (id)_nodeAtPosition:(struct _NSPoint)fp8 outBounds:(struct _NSRect *)fp16;
- (unsigned int)_performActionOnNodes:(SEL)fp8 context:(void *)fp12 selectedOnly:(BOOL)fp16;
- (unsigned int)_performActionOnSelectedNodes:(SEL)fp8 context:(void *)fp12;
- (unsigned int)_performActionOnAllNodes:(SEL)fp8 context:(void *)fp12;
- (struct _NSRect)_boundsForSelection;
- (BOOL)_deselectAll;
- (BOOL)__selectionFilter:(id)fp8;
- (void)_writeSelectionToPasteboard:(id)fp8 fromPoint:(struct _NSPoint)fp12;
- (void)_readSelectionFromPasteboard:(id)fp8 toPoint:(struct _NSPoint)fp12;
- (id)_imageForSelection;
- (id)_firstResponderNode;
- (id)_colorForConnection:(id)fp8;
- (void)delete:(id)fp8;
@end

@interface GFGraphView (Specific)
- (BOOL)trackMouse:(id)fp8;
- (BOOL)handleKeyDown:(id)fp8;
- (BOOL)handleKeyUp:(id)fp8;
- (BOOL)trackConnection:(id)fp8 fromPort:(id)fp12 atPoint:(struct _NSPoint)fp16;
- (void)noteContentChanged;
- (id)setupInspectorViews;
- (void)resetInspectorViews;
- (id)tooltipStringForPoint:(struct _NSPoint)fp8 tooltipBounds:(struct _NSRect *)fp16;
- (id)setupTooltipViewForPoint:(struct _NSPoint)fp8 tooltipBounds:(struct _NSRect *)fp16;
- (void)resetTooltipView;
- (id)menuForGraph;
- (void)setGraph:(id)fp8;
- (id)graph;
- (BOOL)drawsBackground;
- (void)setDrawsBackground:(BOOL)fp8;
- (BOOL)drawsShadows;
- (void)setDrawsShadows:(BOOL)fp8;
- (void)setGridStep:(unsigned int)fp8;
- (unsigned int)gridStep;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)fp8;
- (id)gridColor;
- (void)setGridColor:(id)fp8;
- (void)setTooltipDelay:(double)fp8;
- (double)tooltipDelay;
- (id)nodeActorForNode:(id)fp8;
- (struct _NSRect)boundsForConnection:(id)fp8;
- (struct _NSRect)boundsForNode:(id)fp8;
- (struct _NSRect)maxBounds;
- (struct _NSRect)boundsForConnection:(id)fp8 fromPoint:(struct _NSPoint)fp12 toPoint:(struct _NSPoint)fp20;
- (void)drawConnection:(id)fp8 fromPoint:(struct _NSPoint)fp12 toPoint:(struct _NSPoint)fp20;
- (void)drawBackground:(struct _NSRect)fp8;
- (void)drawSelectionArea:(struct _NSRect)fp8;
- (void)setNeedsDisplayForNode:(id)fp8;
@end

@interface _NodeInspectorViewsController : NSObject
{
    NSView *_informationView;
    NSTextField *_titleField;
    NSTextField *_noteField;
    NSTextField *_nameField;
    NSTextField *_descriptionField;
    GFNode *_targetNode;
}

+ (id)sharedController;
- (id)init;
- (void)resetTitle:(id)fp8;
- (void)titleEdited:(id)fp8;
- (void)noteEdited:(id)fp8;
- (id)setupViewsForNode:(id)fp8;

@end

@interface GFNodeActor : NSObject
{
    void *_unused[4];
}

+ (id)sharedActor;
- (id)__portIsConnected:(id)fp8;
- (struct _NSSize)sizeForNode:(id)fp8;
- (id)portForPoint:(struct _NSPoint)fp8 inNode:(id)fp16 bounds:(struct _NSRect)fp20;
- (struct _NSPoint)pointForPort:(id)fp8 inNode:(id)fp12 bounds:(struct _NSRect)fp16;
- (void)drawNode:(id)fp8 bounds:(struct _NSRect)fp12 view:(id)fp28;
- (void)drawSelectionRingWithColor:(id)fp8 width:(float)fp12 forNode:(id)fp16 bounds:(struct _NSRect)fp20 view:(id)fp36;
- (BOOL)trackMouse:(id)fp8 inNode:(id)fp12 bounds:(struct _NSRect)fp16 view:(id)fp32;
- (id)menuForNode:(id)fp8 view:(id)fp12;
- (BOOL)nodeAcceptsFirstResponder:(id)fp8 view:(id)fp12;
- (BOOL)nodeBecomesFirstResponder:(id)fp8 view:(id)fp12;
- (BOOL)nodeResignsFirstResponder:(id)fp8 view:(id)fp12;
- (BOOL)handleKeyUp:(id)fp8 inNode:(id)fp12 view:(id)fp16;
- (BOOL)handleKeyDown:(id)fp8 inNode:(id)fp12 view:(id)fp16;
- (id)setupInspectorViewsForNode:(id)fp8;
- (void)resetInspectorViews;
- (id)tooltipStringForPoint:(struct _NSPoint)fp8 inNode:(id)fp16 bounds:(struct _NSRect)fp20 tooltipBounds:(struct _NSRect *)fp36;
- (id)setupTooltipViewForPoint:(struct _NSPoint)fp8 inNode:(id)fp16 bounds:(struct _NSRect)fp20 tooltipBounds:(struct _NSRect *)fp36;
- (void)resetTooltipView;

@end

@interface GFNode (GFNodeActor)
- (id)nodeActorForView:(id)fp8;
@end

@interface GFNodeActor (Private)
- (id)_titleTextAttributesForNode:(id)fp8;
- (id)_portTextAttributesForNode:(id)fp8;
- (id)_colorForNode:(id)fp8;
- (void)_makeCGPathForNode:(id)fp8 bounds:(struct _NSRect)fp12 inContext:(struct CGContext *)fp28;
@end

@interface GFNodeActor (MenuActions)
- (void)_publish:(id)fp8;
- (void)_editSubgraph:(id)fp8;
@end

@interface GFGraph (ProxyPortKeyFromName)
- (id)_uniqueProxyPortKeyFromName:(id)fp8;
@end

@interface GFNodeManagerView : NSView
{
    NSView *_insideView;
    NSString *_namespace;
    NSString *_filterString;
    NSMutableArray *_nodeNames;
    NSTableView *_tableView;
    NSTextView *_textView;
    NSCell *_defaultDataCell;
    void *_unused[4];
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)finalize;
- (void)dealloc;
- (void)setNodeNamespace:(id)fp8;
- (id)nodeNamespace;
- (void)setFilterString:(id)fp8;
- (id)filterString;
- (BOOL)tableView:(id)fp8 shouldEditTableColumn:(id)fp12 row:(int)fp16;

@end

@interface GFNodeManagerView (TableViewSource)
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 sortDescriptorsDidChange:(id)fp12;
- (BOOL)tableView:(id)fp8 writeRows:(id)fp12 toPasteboard:(id)fp16;
- (void)tableViewSelectionDidChange:(id)fp8;
@end

@interface GFNodeManagerView (Private)
- (void)_finishInitialization;
- (id)_descriptionForNode:(id)fp8;
- (id)_cellContentForNode:(id)fp8 columnIdentifier:(id)fp12;
- (int)_compareNode:(id)fp8 withNode:(id)fp12 usingColumnIdentifier:(id)fp16 ascending:(BOOL)fp20;
- (id)_filterStringsForNode:(id)fp8;
- (void)_refreshList:(id)fp8;
- (void)_addColumnWithIdentifier:(id)fp8 title:(id)fp12 dataCell:(id)fp16 sortable:(BOOL)fp20;
- (void)_removeColumnWithIdentifier:(id)fp8;
- (void)_removeAllColumns;
- (id)_columns;
- (void)_sortByIdentifiers:(id)fp8;
- (void)_selectRow:(unsigned int)fp8;
@end

@interface GFTooltipView : NSView
{
    NSString *_string;
}

+ (id)sharedView;
+ (id)sharedWithString:(id)fp8;
+ (id)textAttributes;
+ (id)backgroundColor;
+ (id)frameColor;
- (void)dealloc;
- (BOOL)isOpaque;
- (BOOL)isFlipped;
- (id)string;
- (void)setString:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface GFTooltipWindow : NSPanel
{
}

+ (id)sharedWindow;
- (id)init;
- (void)setContentView:(id)fp8;
- (void)showAtPoint:(struct _NSPoint)fp8;
- (void)hide;

@end

@interface GFStringEditor : NSObject
{
}

+ (void)_doneEditing:(id)fp8;
+ (BOOL)runSharedEditorWithString:(id *)fp8 inView:(id)fp12 atPoint:(struct _NSPoint)fp16 width:(unsigned int)fp24 numLines:(unsigned int)fp28;

@end

@interface GFStringEditorWindow : NSWindow
{
}

- (id)init;
- (struct _NSSize)size;
- (void)setSize:(struct _NSSize)fp8;
- (BOOL)canBecomeKeyWindow;
- (void)sendEvent:(id)fp8;

@end

@interface GFGraphView (LocalNodeActor)
- (struct _NSSize)_sizeForNode:(id)fp8;
- (struct _NSPoint)_pointForPort:(id)fp8 inNode:(id)fp12 bounds:(struct _NSRect)fp16;
- (id)_portForPoint:(struct _NSPoint)fp8 inNode:(id)fp16 bounds:(struct _NSRect)fp20;
- (void)_drawNode:(id)fp8 bounds:(struct _NSRect)fp12;
- (void)_drawSelectionRingWithColor:(id)fp8 width:(float)fp12 forNode:(id)fp16 bounds:(struct _NSRect)fp20;
- (BOOL)_trackMouse:(id)fp8 inNode:(id)fp12 bounds:(struct _NSRect)fp16;
- (id)_menuForNode:(id)fp8;
- (BOOL)_nodeAcceptsFirstResponder:(id)fp8;
- (BOOL)_nodeBecomesFirstResponder:(id)fp8;
- (BOOL)_nodeResignsFirstResponder:(id)fp8;
- (BOOL)_handleKeyUp:(id)fp8 inNode:(id)fp12;
- (BOOL)_handleKeyDown:(id)fp8 inNode:(id)fp12;
@end

@interface GFPort (ProxyNameEditing)
- (id)editName:(id)fp8 inView:(id)fp12;
@end

@interface QCObject : NSObject <NSCoding, NSCopying>
{
    unsigned int _timestamp;
    void *_observationInfo;
    void *_unused[4];
}

+ (BOOL)accessInstanceVariablesDirectly;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)fp8;
+ (id)allocWithZone:(struct _NSZone *)fp8;
+ (Class)valueClass;
- (id)value;
- (unsigned int)_timestamp;
- (void)_updateTimestamp;
- (void)willChange;
- (void)didChange;
- (id)description;
- (id)valueForKey:(id)fp8;
- (id)stateValue;
- (id)initWithStateValue:(id)fp8;
- (void)setObservationInfo:(void *)fp8;
- (void *)observationInfo;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;

@end

@interface QCStructure : QCObject
{
    GFList *_list;
    void *_unused2[4];
}

- (id)initWithDictionary:(id)fp8;
- (id)initWithArray:(id)fp8;
- (id)initWithMembers:(id)fp8 keyPrefix:(id)fp12;
- (id)initWithMembersAndKeys:(id)fp8;
- (id)initWithMembers:(id *)fp8 forKeys:(id *)fp12 count:(unsigned int)fp16;
- (id)init;
- (void)dealloc;
- (unsigned int)count;
- (id)memberForKey:(id)fp8;
- (id)memberAtIndex:(unsigned int)fp8;
- (id)keyAtIndex:(unsigned int)fp8;
- (void)setMember:(id)fp8 forKey:(id)fp12;
- (void)removeMemberForKey:(id)fp8;
- (void)removeAllMembers;
- (id)stateValue;
- (id)initWithStateValue:(id)fp8;
- (id)_list;

@end

@interface QCStructure (Override)
+ (Class)valueClass;
- (id)value;
- (id)description;
@end

@interface QCLink : GFConnection
{
}

+ (BOOL)accessInstanceVariablesDirectly;
- (id)sourcePatch;
- (id)sourceOutput;
- (id)destinationPatch;
- (id)destinationInput;
- (id)ownerPatch;

@end

@interface QCPatch : GFGraph
{
    QCPatchRuntime *_executionRuntime;
    int _executionMode;
    unsigned int _executionFlags;
    QCContext *_executionContext;
    int _timebase;
    QCBooleanPort *_enableInput;
    QCNumberPort *_timeInput;
    BOOL _enabled;
    unsigned int _activeCount;
    double _lastExecutionTime;
    unsigned int _lastExecutionFrame;
    double _activationTime;
    void *_observationInfo;
    void *_unused3[4];
}

+ (BOOL)accessInstanceVariablesDirectly;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)fp8;
- (id)consumerSubpatches;
- (void)setOrder:(unsigned int)fp8 forConsumerSubpatch:(id)fp12;
- (unsigned int)orderForConsumerSubpatch:(id)fp8;
- (void)setTimebase:(int)fp8;
- (int)timebase;
- (id)systemInputPorts;
- (id)systemOutputPorts;

@end

@interface QCLink (Override)
- (id)initWithGraph:(id)fp8 sourcePort:(id)fp12 destinationPort:(id)fp16 arguments:(id)fp20;
- (void)connectionWillDeleteFromGraph;
@end

@interface QCPatch (Registry)
+ (id)patchNames;
+ (id)patchWithName:(id)fp8;
+ (id)patchAttributesWithName:(id)fp8;
@end

@interface QCPatch (Private)
+ (void)initialize;
+ (Class)_baseClass;
- (id)_executionRuntime;
- (id)_executionContext;
- (int)_executionMode;
- (id)_enableInput;
- (void)_invalidateExecutionMode;
- (void)_setTimebase:(int)fp8;
- (void)_invalidateTimeMode;
- (unsigned int)_activeCount;
- (BOOL)_setup:(id)fp8 runtime:(id)fp12;
- (void)_enable;
- (void)_activate;
- (BOOL)_execute:(double)fp8 arguments:(id)fp16;
- (void)_deactivate;
- (void)_disable;
- (void)_cleanup;
- (int)_executionFlags;
- (void)_setNeedsExecution;
- (void)_setForceExecuteProcessors;
- (id)_safeURLWithString:(id)fp8;
@end

@interface QCPatch (Customization)
+ (int)executionMode;
+ (BOOL)allowsSubpatches;
+ (int)timeMode;
- (BOOL)isOutput:(id)fp8 dependentFromInput:(id)fp12;
- (void)receiveMessage:(id)fp8 name:(id)fp12 attributes:(id)fp16;
- (id)setup:(id)fp8;
- (void)enable:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)disable:(id)fp8;
- (void)cleanup:(id)fp8;
@end

@interface QCPatch (Execution)
- (BOOL)executeSubpatches:(double)fp8 arguments:(id)fp16;
@end

@interface QCPatch (Override)
+ (Class)_proxyClass;
+ (Class)_listClass;
+ (id)_keyFromName:(id)fp8;
- (id)_baseKey;
- (void)_logMessage:(id)fp8;
- (id)initWithIdentifier:(id)fp8;
- (void)finalize;
- (void)dealloc;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (void)stateUpdated;
- (id)createInputPortWithArguments:(id)fp8 forKey:(id)fp12;
- (id)createOutputPortWithArguments:(id)fp8 forKey:(id)fp12;
- (BOOL)canAddNode:(id)fp8;
- (BOOL)addNode:(id)fp8 forKey:(id)fp12;
- (void)removeNodeForKey:(id)fp8;
- (BOOL)_detectClosedLoopFromPort:(id)fp8 toPort:(id)fp12;
- (BOOL)canConnectPort:(id)fp8 toPort:(id)fp12;
- (id)argumentsForConnectionFromPort:(id)fp8 toPort:(id)fp12;
- (id)createConnectionFromPort:(id)fp8 toPort:(id)fp12 forKey:(id)fp16;
- (void)deleteConnectionForKey:(id)fp8;
- (id)createProxyPortWithOriginalPort:(id)fp8 forKey:(id)fp12;
- (void)deleteProxyPortForKey:(id)fp8;
- (void)deleteInputPortForKey:(id)fp8;
- (void)deleteOutputPortForKey:(id)fp8;
- (int)directionForPort:(id)fp8;
- (id)valueForKey:(id)fp8;
- (id)customInputPorts;
- (id)customOutputPorts;
- (void)setObservationInfo:(void *)fp8;
- (void *)observationInfo;
@end

@interface QCPatch (Wrappers)
- (id)inputs;
- (id)outputs;
- (id)ivarInputs;
- (id)ivarOutputs;
- (id)customInputs;
- (id)customOutputs;
- (id)systemInputs;
- (id)systemOutputs;
- (id)createInputWithPortClass:(Class)fp8 forKey:(id)fp12 attributes:(id)fp16;
- (id)createInputWithPortClass:(Class)fp8 forKey:(id)fp12 attributes:(id)fp16 arguments:(id)fp20;
- (id)createOutputWithPortClass:(Class)fp8 forKey:(id)fp12 attributes:(id)fp16;
- (id)createOutputWithPortClass:(Class)fp8 forKey:(id)fp12 attributes:(id)fp16 arguments:(id)fp20;
- (void)deleteInputForKey:(id)fp8;
- (void)deleteOutputForKey:(id)fp8;
- (id)inputForKey:(id)fp8;
- (id)keyForInput:(id)fp8;
- (id)outputForKey:(id)fp8;
- (id)keyForOutput:(id)fp8;
- (id)parentPatch;
- (id)subpatches;
- (BOOL)canAddSubpatch:(id)fp8;
- (BOOL)addSubpatch:(id)fp8 forKey:(id)fp12;
- (void)removeSubpatchForKey:(id)fp8;
- (id)subpatchForKey:(id)fp8;
- (id)keyForSubpatch:(id)fp8;
- (id)pathForSubpatch:(id)fp8;
- (id)subpatchForPath:(id)fp8;
- (BOOL)canLinkOutput:(id)fp8 toInput:(id)fp12;
- (id)createLinkFromOutput:(id)fp8 toInput:(id)fp12 forKey:(id)fp16;
- (void)deleteLinkForKey:(id)fp8;
- (id)links;
- (id)linkForKey:(id)fp8;
- (id)keyForLink:(id)fp8;
- (BOOL)canPublishInput:(id)fp8;
- (BOOL)canPublishOutput:(id)fp8;
- (id)publishInput:(id)fp8 forKey:(id)fp12;
- (id)publishOutput:(id)fp8 forKey:(id)fp12;
- (void)unpublishInput:(id)fp8;
- (void)unpublishOutput:(id)fp8;
- (id)isInputPublished:(id)fp8;
- (id)isOutputPublished:(id)fp8;
- (id)pathForInput:(id)fp8;
- (id)inputForPath:(id)fp8;
- (id)pathForOutput:(id)fp8;
- (id)outputForPath:(id)fp8;
@end

@interface QCPort : GFPort
{
    Class _baseClass;
    QCPort *_connectedPort;
    unsigned int _timestamp;
    unsigned int _previousTimestamp;
    BOOL _updated;
    NSString *_keyCache;
    int _direction;
    QCProxyPort *_proxyPort;
    unsigned int _connectedPortTimestamp;
    void *_observationInfo;
    void *_unused2[4];
}

+ (BOOL)accessInstanceVariablesDirectly;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)fp8;
+ (id)allocWithZone:(struct _NSZone *)fp8;
+ (Class)baseClass;
- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (id)key;
- (void)portWillDeleteFromNode;
- (id)value;
- (BOOL)setValue:(id)fp8;
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (Class)valueClass;
- (BOOL)canConnectToPort:(id)fp8;
- (BOOL)takeValue:(id)fp8 fromPort:(id)fp12;
- (id)ownerPatch;
- (BOOL)wasUpdated;
- (unsigned int)_timestamp;
- (void)_updateTimestamp;
- (void)willChangeValue;
- (void)didChangeValue;
- (id)stateValue;
- (BOOL)setStateValue:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (BOOL)_execute:(double)fp8 arguments:(id)fp16;
- (void)_resetUpdate;
- (id)_proxyPort;
- (void)_setProxyPort:(id)fp8;
- (id)_connectedPort;
- (void)_setConnectedPort:(id)fp8;
- (void)_setDirection:(int)fp8;
- (int)_direction;
- (Class)baseClass;
- (void)_setBaseClass:(Class)fp8;
- (id)description;
- (id)valueForKey:(id)fp8;
- (void)setValue:(id)fp8 forKey:(id)fp12;
- (void)addObserver:(id)fp8 forKeyPath:(id)fp12 options:(unsigned int)fp16 context:(void *)fp20;
- (void)removeObserver:(id)fp8 forKeyPath:(id)fp12;
- (void)setObservationInfo:(void *)fp8;
- (void *)observationInfo;
- (id)_argumentsFromAttributesKey:(id)fp8 originalArguments:(id)fp12;

@end


@interface QCVirtualPort : QCPort
{
    id _value;
    BOOL _valueIsObject;
    unsigned int _lastObjectTimestamp;
    void *_unused3[4];
}

+ (Class)baseClass;
- (id)rawValue;
- (void)setRawValue:(id)fp8;
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (Class)valueClass;
- (id)stateValue;
- (BOOL)setStateValue:(id)fp8;

@end


@interface QCObjectPort : QCVirtualPort
{
}

+ (id)allocWithZone:(struct _NSZone *)fp8;
- (Class)objectClass;
- (id)object;
- (BOOL)setObject:(id)fp8;

@end

@interface QCObjectPort (Override)
- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (Class)valueClass;
- (BOOL)setValue:(id)fp8;
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (BOOL)canConnectToPort:(id)fp8;
- (BOOL)takeValue:(id)fp8 fromPort:(id)fp12;
- (id)stateValue;
- (BOOL)setStateValue:(id)fp8;
- (id)description;
@end

@interface QCStructurePort : QCObjectPort
{
}

+ (Class)baseClass;
- (Class)objectClass;
- (id)structureValue;
- (void)setStructureValue:(id)fp8;

@end


@interface QCStructurePort (Override)
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (BOOL)setValue:(id)fp8;
@end

@interface QCColorPort : QCPort
{
    float _red;
    float _green;
    float _blue;
    float _alpha;
}

- (float)redComponent;
- (float)greenComponent;
- (float)blueComponent;
- (float)alphaComponent;
- (void)getRed:(float *)fp8 green:(float *)fp12 blue:(float *)fp16 alpha:(float *)fp20;
- (void)setRedComponent:(float)fp8;
- (void)setGreenComponent:(float)fp8;
- (void)setBlueComponent:(float)fp8;
- (void)setAlphaComponent:(float)fp8;
- (void)setRed:(float)fp8 green:(float)fp12 blue:(float)fp16 alpha:(float)fp20;

@end

@interface QCColorPort (Primary)
- (void)_setPrimary:(struct _CGLContextObject *)fp8;
@end

@interface QCStringPort : QCPort
{
    NSString *_string;
}

- (id)stringValue;
- (void)setStringValue:(id)fp8;

@end

@interface QCBooleanPort : QCPort
{
    BOOL _value;
}

- (BOOL)booleanValue;
- (void)setBooleanValue:(BOOL)fp8;

@end

@interface QCIndexPort : QCPort
{
    unsigned int _index;
    unsigned int _maxIndex;
}

- (unsigned int)indexValue;
- (void)setIndexValue:(unsigned int)fp8;
- (unsigned int)maxIndexValue;
- (void)setMaxIndexValue:(unsigned int)fp8;

@end

@interface QCNumberPort : QCPort
{
    double _value;
    double _min;
    double _max;
}

- (double)doubleValue;
- (void)setDoubleValue:(double)fp8;
- (double)minDoubleValue;
- (double)maxDoubleValue;
- (void)setMinDoubleValue:(double)fp8;
- (void)setMaxDoubleValue:(double)fp8;

@end

@interface QCProxyPort : QCPort
{
}

+ (id)allocWithZone:(struct _NSZone *)fp8;
+ (Class)baseClass;
- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (void)portWillDeleteFromNode;
- (id)methodSignatureForSelector:(SEL)fp8;
- (void)forwardInvocation:(id)fp8;
- (unsigned int)_timestamp;
- (id)value;
- (BOOL)setValue:(id)fp8;
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (Class)valueClass;
- (BOOL)canConnectToPort:(id)fp8;
- (BOOL)takeValue:(id)fp8 fromPort:(id)fp12;
- (id)stateValue;
- (BOOL)setStateValue:(id)fp8;
- (id)_argumentsFromAttributesKey:(id)fp8 originalArguments:(id)fp12;

@end

@interface QCProxyPort (QCPort)
- (double)doubleValue;
- (void)setDoubleValue:(double)fp8;
- (unsigned int)indexValue;
- (void)setIndexValue:(unsigned int)fp8;
- (BOOL)booleanValue;
- (void)setBooleanValue:(BOOL)fp8;
- (id)stringValue;
- (void)setStringValue:(id)fp8;
- (void)getRed:(float *)fp8 green:(float *)fp12 blue:(float *)fp16 alpha:(float *)fp20;
- (void)setRed:(float)fp8 green:(float)fp12 blue:(float)fp16 alpha:(float)fp20;
- (id)rawValue;
- (void)setRawValue:(id)fp8;
@end

@interface QCProxyPort (QCStructurePort)
- (id)structureValue;
- (void)setStructureValue:(id)fp8;
@end

@interface QCProxyPort (QCObjectPort)
- (id)object;
- (BOOL)setObject:(id)fp8;
@end

@interface QCColorPort (Override)
+ (Class)baseClass;
- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (BOOL)canConnectToPort:(id)fp8;
- (BOOL)takeValue:(id)fp8 fromPort:(id)fp12;
- (id)stateValue;
- (BOOL)setStateValue:(id)fp8;
@end

@interface QCStringPort (Override)
+ (Class)baseClass;
- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (void)dealloc;
- (id)value;
- (BOOL)setValue:(id)fp8;
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (BOOL)takeValue:(id)fp8 fromPort:(id)fp12;
- (Class)valueClass;
- (id)stateValue;
- (BOOL)setStateValue:(id)fp8;
@end

@interface QCBooleanPort (Override)
+ (Class)baseClass;
- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (id)value;
- (BOOL)setValue:(id)fp8;
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (Class)valueClass;
- (BOOL)takeValue:(id)fp8 fromPort:(id)fp12;
- (id)stateValue;
- (BOOL)setStateValue:(id)fp8;
@end

@interface QCIndexPort (Override)
+ (Class)baseClass;
- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (id)value;
- (BOOL)setValue:(id)fp8;
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (Class)valueClass;
- (BOOL)takeValue:(id)fp8 fromPort:(id)fp12;
- (id)stateValue;
- (BOOL)setStateValue:(id)fp8;
@end

@interface QCNumberPort (Override)
+ (Class)baseClass;
- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (id)value;
- (BOOL)setValue:(id)fp8;
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (Class)valueClass;
- (BOOL)takeValue:(id)fp8 fromPort:(id)fp12;
- (id)stateValue;
- (BOOL)setStateValue:(id)fp8;
@end

@interface QCVirtualPort (Override)
- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (void)dealloc;
- (id)value;
- (BOOL)setValue:(id)fp8;
- (BOOL)canConnectToPort:(id)fp8;
- (BOOL)takeValue:(id)fp8 fromPort:(id)fp12;
- (unsigned int)_timestamp;
@end

@interface QCList : GFList
{
}

+ (BOOL)accessInstanceVariablesDirectly;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)fp8;
- (void)setObject:(id)fp8 forKey:(id)fp12;
- (void)insertObject:(id)fp8 atIndex:(unsigned int)fp12 forKey:(id)fp16;
- (void)removeObjectAtIndex:(unsigned int)fp8;
- (void)removeAllObjects;
- (id)valueForKey:(id)fp8;

@end

@interface QCPatchRuntime : NSObject
{
    QCPatch *_patch;
    QCContext *_context;
    NSMutableDictionary *_options;
    int _flags;
    unsigned int frameID;
    double frameTime;
    unsigned int patchTotalCount;
    unsigned int patchActiveCount;
    unsigned int patchTraversedCount;
    unsigned int patchExecutedCount;
    double patchExecutionTime;
    double patchRenderTime;
}

- (id)init;
- (id)initWithPatch:(id)fp8 context:(id)fp12 options:(id)fp16;
- (void)dealloc;
- (id)patch;
- (id)context;
- (id)options;
- (void)setOption:(id)fp8 forKey:(id)fp12;
- (int)_flags;

@end

@interface QCContext : NSObject
{
    NSDictionary *_options;
    NSMutableDictionary *_userInfo;
    void *_unused[4];
}

- (id)init;
- (id)initWithOptions:(id)fp8;
- (void)dealloc;
- (id)options;
- (void)willExecutePatch:(id)fp8;
- (void)didExecutePatch:(id)fp8;
- (id)userInfo;
- (id)description;

@end

@interface QCPatch (Runtime)
- (void)_sendMessage:(id)fp8 attributes:(id)fp12;
- (void)broadcastMessage:(id)fp8 attributes:(id)fp12;
- (BOOL)startRendering:(id)fp8 options:(id)fp12;
- (BOOL)render:(double)fp8 arguments:(id)fp16;
- (void)stopRendering;
- (BOOL)isRendering;
@end

@interface QCTextRenderer : NSObject
{
    NSString *_string;
    int _alignmentH;
    int _alignmentV;
    NSString *_fontName;
    float _fontSize;
    float _fontKerning;
    float _offset;
    struct _NSRect _frame;
    void *_framesetterRef;
    void *_frameRef;
    float _ascent;
    float _descent;
    float _leading;
    struct _NSRect _bounds;
}

+ (id)sharedRenderer;
+ (void)drawString:(id)fp8 inContext:(struct CGContext *)fp12 atPoint:(struct _NSPoint)fp16 withFontName:(id)fp24 size:(float)fp28 red:(float)fp32 green:(float)fp36 blue:(float)fp40 alpha:(float)fp44;
- (id)init;
- (void)finalize;
- (void)dealloc;
- (void)_flushCache:(BOOL)fp8;
- (void)_updateCache;
- (void)setFontName:(id)fp8 size:(float)fp12;
- (id)fontName;
- (float)fontSize;
- (void)setBounds:(struct _NSRect)fp8;
- (struct _NSRect)bounds;
- (void)setKerningShift:(float)fp8;
- (float)kerningShift;
- (void)setLeadingOffset:(float)fp8;
- (float)leadingOffset;
- (void)setHorizontalAlignment:(int)fp8;
- (int)horizontalAlignment;
- (void)setVerticalAlignment:(int)fp8;
- (int)verticalAlignment;
- (void)setString:(id)fp8;
- (id)string;
- (unsigned int)visibleLineCount;
- (struct _NSRange)visibleStringRange;
- (struct _NSRect)typographicBounds;
- (void)drawInContext:(struct CGContext *)fp8;
- (void)drawInContext:(struct CGContext *)fp8 withColorRed:(float)fp12 green:(float)fp16 blue:(float)fp20 alpha:(float)fp24;

@end

@interface QCSharedTimers : NSObject
{
    struct __CFArray *_timers;
}

+ (id)sharedTimers;
- (id)init;
- (void)addClient:(id)fp8 selector:(SEL)fp12 frequency:(float)fp16;
- (void)removeClient:(id)fp8 selector:(SEL)fp12;
- (id)description;

@end

@interface NSString (QCTextRenderer)
- (void)drawInContext:(struct CGContext *)fp8 atPoint:(struct _NSPoint)fp12 withFontName:(id)fp20 size:(float)fp24;
- (void)drawInContext:(struct CGContext *)fp8 inRect:(struct _NSRect)fp12 withFontName:(id)fp28 size:(float)fp32;
- (void)drawInContext:(struct CGContext *)fp8 inRect:(struct _NSRect)fp12 withFontName:(id)fp28 size:(float)fp32 horizontalAlignment:(int)fp36 verticalAlignment:(int)fp40;
@end

@interface QCColorPort (NSColor)
- (id)value;
- (BOOL)setValue:(id)fp8;
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (Class)valueClass;
@end

@interface QCPatchBrowserView : GFGraphBrowserView
{
    void *_unused2[4];
}

+ (void)initialize;
+ (BOOL)_isGraph:(id)fp8;
- (Class)valueClassForBinding:(id)fp8;

@end

@interface QCPatchManagerView : GFNodeManagerView
{
    void *_unused2[4];
}

+ (void)initialize;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)_filterStringsForNode:(id)fp8;

@end

@interface QCPatchEditorView : GFGraphEditorView
{
    BOOL _visualDebugging;
    void *_unused2[4];
}

+ (void)initialize;
- (Class)valueClassForBinding:(id)fp8;
- (void)showInspector:(id)fp8;

@end

@interface QCPatchView : GFGraphView
{
    void *_unused2[4];
}

- (id)_colorForConnection:(id)fp8;
- (BOOL)_editNode:(id)fp8;
- (void)_addSubgraph:(id)fp8;
- (void)__computeOrder:(id)fp8 context:(void *)fp12;
- (id)_createSubgraphFromSelection:(id)fp8;
- (id)menuForGraph;
- (void)_finishInitialization;
- (BOOL)acceptDroppedFile:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (BOOL)performDroppedFile:(id)fp8 atPosition:(struct _NSPoint)fp12;
- (BOOL)performDragOperation:(id)fp8;

@end

@interface QCPatchActor : GFNodeActor
{
    void *_unused2[4];
}

- (id)_colorForNode:(id)fp8;
- (void)_makeCGPathForNode:(id)fp8 bounds:(struct _NSRect)fp12 inContext:(struct CGContext *)fp28;
- (id)inspectorForPatch:(id)fp8;
- (struct _NSSize)sizeForNode:(id)fp8;
- (void)drawNode:(id)fp8 bounds:(struct _NSRect)fp12 view:(id)fp28;
- (void)_setLayer:(id)fp8;
- (void)_parent:(id)fp8;
- (void)_local:(id)fp8;
- (void)_external:(id)fp8;
- (id)menuForNode:(id)fp8 view:(id)fp12;
- (BOOL)trackMouse:(id)fp8 inNode:(id)fp12 bounds:(struct _NSRect)fp16 view:(id)fp32;

@end

@interface _SharedPatchActor : QCPatchActor
{
    NSMutableDictionary *_inspectorCache;
    QCInspector *_currentInspector;
}

- (id)init;
- (void)dealloc;
- (id)inspectorForPatch:(id)fp8;
- (id)setupInspectorViewsForNode:(id)fp8;
- (void)resetInspectorViews;

@end

@interface QCInspector : NSObject
{
    NSView *view;
    QCPatch *_patch;
    void *_unused2[4];
}

+ (id)viewNibName;
+ (id)viewTitle;
- (id)init;
- (void)didLoadNib;
- (id)patch;
- (void)setupViewForPatch:(id)fp8;
- (void)resetView;
- (id)view;

@end

@interface QCOpenGLContext : QCContext
{
    struct _CGLContextObject *_glContext;
    struct _CGLPixelFormatObject *_pixelFormat;
    CIContext *_ciContext;
    struct __CVOpenGLTextureCache *_textureCache;
    QCGLObject **_objectList;
    unsigned int _objectCount;
    unsigned int _objectListSize;
    unsigned int _executingPatches;
    float _saveProjection[16];
    float _saveModelView[16];
    int _saveFace;
    BOOL _flipped;
    BOOL _hasFP;
    struct _NSSize _pixelAspectRatio;
    struct _NSRect _cleanAperture;
    struct _NSRect _viewportFrame;
    struct _NSRect _viewportBounds;
    struct _NSRect _cleanViewportFrame;
    struct _NSRect _cleanViewportBounds;
    struct _CGLContextObject *_spareGLContext;
    struct _CGLPixelFormatObject *_sparePixelFormat;
    CIContext *_spareCIContext;
    NSMutableArray *_pBufferPool;
    void *_unused2[4];
}

- (id)init;
- (id)initWithCGLContextObj:(struct _CGLContextObject *)fp8 pixelFormat:(struct _CGLPixelFormatObject *)fp12 options:(id)fp16;
- (void)_finalize_QCOpenGLContext;
- (void)finalize;
- (void)dealloc;
- (struct _CGLContextObject *)CGLContextObj;
- (struct _CGLPixelFormatObject *)CGLPixelFormatObj;
- (id)CIContext;
- (struct __CVOpenGLTextureCache *)textureCache;
- (struct _CGLContextObject *)_spareCGLContextObj;
- (struct _CGLPixelFormatObject *)_spareCGLPixelFormatObj;
- (id)_spareCIContext;
- (id)_pBufferWithTarget:(unsigned long)fp8 pixelsWide:(unsigned int)fp12 pixelsHigh:(unsigned int)fp16 mipmapLevels:(unsigned int)fp20;
- (void)purge;
- (void)willDestroyCGLContext;
- (void)_registerObject:(id)fp8;
- (void)_unregisterObject:(id)fp8 notify:(BOOL)fp12;
- (BOOL)_updateViewport;
- (void)willExecutePatch:(id)fp8;
- (void)didExecutePatch:(id)fp8;
- (void)setPixelAspectRatio:(struct _NSSize)fp8;
- (struct _NSSize)pixelAspectRatio;
- (void)setCleanAperture:(struct _NSRect)fp8;
- (struct _NSRect)cleanAperture;
- (void)_setFlippedRendering:(BOOL)fp8;
- (BOOL)_isFlippedRendering;
- (struct _NSRect)viewportFrame:(BOOL)fp8;
- (struct _NSRect)viewportBounds:(BOOL)fp8;
- (struct _NSSize)viewportResolution;
- (BOOL)isCoreImageSupported;
- (id)description;

@end

@interface QCOpenGLContext (NSOpenGLContext)
+ (id)contextWithNSOpenGLContext:(id)fp8 format:(id)fp12 options:(id)fp16;
- (id)initWithNSOpenGLContext:(id)fp8 format:(id)fp12 options:(id)fp16;
@end

@interface QCPatchBrowserView (Wrappers)
- (void)setRootPatch:(id)fp8;
- (id)rootPatch;
- (id)currentPatch;
- (void)setCurrentPatch:(id)fp8;
- (void)setPatchEditor:(id)fp8;
- (id)patchEditor;
@end

@interface QCPatchEditorView (Private)
- (void)__redrawBounds:(id)fp8;
- (void)__patchExecuted:(id)fp8;
- (void)__patchActivated:(id)fp8;
- (void)_setVisualDebugging:(BOOL)fp8;
- (BOOL)_visualDebugging;
@end

@interface QCPatchEditorView (Wrappers)
- (void)setPatch:(id)fp8;
- (id)patch;
- (void)setPatchManager:(id)fp8;
- (id)patchManager;
@end

@interface QCPatchView (Wrappers)
- (void)setPatch:(id)fp8;
- (id)patch;
@end

@interface QCPatch (QCPatchView)
- (id)nodeActorForView:(id)fp8;
- (Class)graphViewClass;
@end

@interface QCPatch (File)
+ (BOOL)canInstantiateWithFile:(id)fp8;
+ (id)instantiateWithFile:(id)fp8;
@end

@interface NSColor (QCHue)
+ (id)_colorWithHue:(float)fp8;
@end

@interface QCExtendedImage : NSImage
{
    NSData *_data;
}

- (void)_setSourceData:(id)fp8;
- (id)_sourceData;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)dealloc;

@end

@interface QCNumericalFormatter : NSFormatter
{
    BOOL _allowsFloats;
    double _min;
    double _max;
}

- (id)init;
- (void)setAllowsFloats:(BOOL)fp8;
- (BOOL)allowsFloats;
- (double)minimum;
- (void)setMinimum:(double)fp8;
- (double)maximum;
- (void)setMaximum:(double)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;
- (id)stringForObjectValue:(id)fp8;

@end

@interface NSOpenGLContext (QCExtensions)
- (id)_initWithCGLContextObj:(struct _CGLContextObject *)fp8;
- (void)_setValue:(long)fp8 forParameter:(int)fp12;
- (long)_valueForParameter:(int)fp8;
@end

@interface QCLogView : NSView
{
    NSView *_insideView;
    NSScrollView *_scrollView;
    NSTextView *_textView;
    QCPatch *_rootPatch;
    void *_unused[4];
}

+ (void)initialize;
- (Class)valueClassForBinding:(id)fp8;
- (void)_appendLog:(id)fp8;
- (void)_message:(id)fp8;
- (void)_finishInitialization;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)finalize;
- (void)dealloc;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)setRootPatch:(id)fp8;
- (id)rootPatch;
- (void)clear:(id)fp8;

@end

@interface QCPatchController : NSController
{
    QCPatch *_patch;
    void *_unused[4];
}

+ (BOOL)accessInstanceVariablesDirectly;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)fp8;
- (void)dealloc;
- (id)patch;
- (void)_real_willChangeValueForKey:(id)fp8;
- (void)_real_didChangeValueForKey:(id)fp8;
- (void)setPatch:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;

@end

@interface QCPatchParametersView : NSView
{
    QCPatch *_patch;
    unsigned int _mask;
    BOOL _autosize;
    GFList *_labels;
    GFList *_controls;
    GFList *_auxiliaryControls;
    struct _NSSize _size;
    void *_unused[4];
}

+ (void)initialize;
- (Class)valueClassForBinding:(id)fp8;
- (void)_layoutUpdated:(id)fp8;
- (void)_labelUpdated:(id)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)_cleanup;
- (void)_setup;
- (void)_stateUpdated:(id)fp8;
- (void)_finishInitialization;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)finalize;
- (void)dealloc;
- (id)patch;
- (void)setPatch:(id)fp8;
- (unsigned int)inputsVisibilityMask;
- (void)setInputsVisibilityMask:(unsigned int)fp8;
- (void)setAutoresize:(BOOL)fp8;
- (BOOL)autoresize;
- (unsigned int)visibleInputs;
- (struct _NSSize)bestSize;
- (BOOL)isFlipped;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface QCImageView : NSImageView
{
    NSString *_filePath;
}

- (void)_resetImage;
- (void)_loadImage;
- (BOOL)sendAction:(SEL)fp8 to:(id)fp12;
- (void)mouseDown:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (id)_filePath;
- (void)dealloc;

@end

@interface QCCircularSlider : NSSlider
{
    double _realValue;
    double _scale;
}

+ (void)initialize;
+ (BOOL)accessInstanceVariablesDirectly;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)fp8;
- (void)_sliderAction:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 scale:(double)fp24;
- (void)setValue:(id)fp8 forKey:(id)fp12;
- (id)valueForKey:(id)fp8;

@end

@interface QCColorPort (ValueEditing)
- (void)_doneColor:(id)fp8;
- (void)_windowWillClose:(id)fp8;
- (void)editValue:(id)fp8 view:(id)fp12;
@end

@interface QCStringPort (ValueEditing)
- (void)editValue:(id)fp8 view:(id)fp12;
@end

@interface QCBooleanPort (ValueEditing)
- (void)_setTrue:(id)fp8;
- (void)_setFalse:(id)fp8;
- (void)editValue:(id)fp8 view:(id)fp12;
@end

@interface QCIndexPort (ValueEditing)
- (void)_setItemIndex:(id)fp8;
- (void)editValue:(id)fp8 view:(id)fp12;
@end

@interface QCNumberPort (ValueEditing)
- (void)editValue:(id)fp8 view:(id)fp12;
@end

@interface QCProxyPort (ValueEditing)
- (void)editValue:(id)fp8 view:(id)fp12;
@end

@interface QCPort (ValueEditing)
- (void)editValue:(id)fp8 view:(id)fp12;
@end

@interface QCPortView : NSView
{
    QCPort *_port;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithPort:(id)fp8;
- (void)dealloc;
- (id)port;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface QCPortGLView : QCPortView
{
    struct _CGLContextObject *_cglContext;
    struct _CGLPixelFormatObject *_cglPixelFormat;
    NSOpenGLContext *_glContext;
    CIContext *_ciContext;
}

- (void)_startRendering:(id)fp8;
- (void)_stopRendering:(id)fp8;
- (id)initWithPort:(id)fp8;
- (void)finalize;
- (void)dealloc;
- (void)lockFocus;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setHidden:(BOOL)fp8;
- (struct _CGLContextObject *)CGLContextObj;
- (id)ciContext;

@end

@interface QCView : NSView
{
    void *_QCViewPrivate;
}

+ (void)setDefaultOptionFlags:(unsigned int)fp8;
+ (void)initialize;
- (Class)valueClassForBinding:(id)fp8;
- (BOOL)isOpaque;
- (struct CGImage *)_createFlippedCGImageRepresentation;
- (id)_bitmapRepresentationForSize:(struct _NSSize)fp8;
- (id)makeThumbnail;
- (void)_clearGLContext;
- (void)setEraseColor:(id)fp8;
- (id)eraseColor;
- (void)setBackgroundColor:(id)fp8;
- (id)backgroundColor;
- (void)erase;
- (struct _NSPoint)_normalizedLocationFromWindowLocation:(struct _NSPoint)fp8;
- (void)_setupRendering;
- (void)_cleanupRendering;
- (void)_renderTimer;
- (void)_reconfigure;
- (void)__stateUpdated:(id)fp8;
- (void)__timebaseChanged:(id)fp8;
- (void)_finishInitialization;
- (id)initWithFrame:(struct _NSRect)fp8 optionFlags:(unsigned int)fp24;
- (id)initWithFrame:(struct _NSRect)fp8 createDepthBuffer:(BOOL)fp24;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)_finalize_QCView;
- (void)finalize;
- (void)dealloc;
- (void)resizeSubviewsWithOldSize:(struct _NSSize)fp8;
- (void)setAspectRatio:(struct _NSSize)fp8;
- (struct _NSSize)aspectRatio;
- (void)lockFocus;
- (void)drawRect:(struct _NSRect)fp8;
- (void)_forwardEvent:(id)fp8 location:(struct _NSPoint)fp12;
- (void)_draw;
- (void)_renderGLContext;
- (BOOL)_hasSurface;
- (void)_surfaceWillGoAway;
- (void)_surfaceDidComeBack;
- (id)defaultRenderingOptions;
- (BOOL)startRendering;
- (BOOL)startRendering:(id)fp8;
- (BOOL)render:(double)fp8 arguments:(id)fp16;
- (void)stopRendering;
- (BOOL)isRendering;
- (void)pauseRendering;
- (void)resumeRendering;
- (BOOL)isPausedRendering;
- (float)averageFPS;
- (float)averageLoad;
- (id)patch;
- (void)setPatch:(id)fp8;
- (id)saveComposition;
- (BOOL)saveCompositionToFile:(id)fp8;
- (BOOL)loadCompositionFromFile:(id)fp8 stateOK:(char *)fp12;
- (BOOL)loadCompositionFromFile:(id)fp8;
- (BOOL)loadComposition:(id)fp8 stateOK:(char *)fp12;
- (void)unloadComposition;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)mouseDown:(id)fp8;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)setAllowsFileLoading:(BOOL)fp8;
- (BOOL)allowsFileLoading;
- (void)setAllowsFileCreation:(BOOL)fp8;
- (BOOL)allowsFileCreation;
- (void)setMaxRenderingFrameRate:(float)fp8;
- (float)maxRenderingFrameRate;
- (void)setEventForwardingMask:(unsigned int)fp8;
- (unsigned int)eventForwardingMask;
- (void)setDoubleBuffer:(BOOL)fp8;
- (BOOL)doubleBuffer;
- (void)setHasZBuffer:(BOOL)fp8;
- (BOOL)hasZBuffer;
- (void)setSoftwareRendering:(BOOL)fp8;
- (BOOL)softwareRendering;
- (void)_windowWillClose:(id)fp8;
- (void)viewDidMoveToWindow;
- (BOOL)autostartsRendering;
- (void)setAutostartsRendering:(BOOL)fp8;
- (BOOL)clearsBackground;
- (void)setClearsBackground:(BOOL)fp8;
- (void)setBackgroundCheckerboardSize:(unsigned int)fp8;
- (unsigned int)backgroundCheckerboardSize;
- (id)_compositionInfo;
- (BOOL)_hasTimer;
- (id)_fullScreenWindow;
- (void)setRenderTime:(double)fp8;
- (double)renderTime;
- (BOOL)isFullScreen;
- (void)setFullScreen:(id)fp8 options:(id)fp12;
- (id)attributes;
- (id)inputKeys;
- (id)outputKeys;
- (BOOL)setValue:(id)fp8 forInputKey:(id)fp12;
- (id)valueForInputKey:(id)fp8;
- (id)valueForOutputKey:(id)fp8;
- (id)_openGLContext;
- (void)setPixelAspectRatio:(struct _NSSize)fp8;
- (struct _NSSize)pixelAspectRatio;
- (void)setCleanAperture:(struct _NSRect)fp8;
- (struct _NSRect)cleanAperture;

@end

@interface QCRenderView : NSView
{
    QCView *_view;
}

- (void)_setQCView:(id)fp8;
- (id)_QCView;
- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;
- (void)viewDidEndLiveResize;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (struct _NSPoint)_normalizedLocationFromWindowLocation:(struct _NSPoint)fp8;
- (struct _NSPoint)_normalizedMouseLocationWithOptionalEvent:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)keyUp:(id)fp8;
- (void)flagsChanged:(id)fp8;
- (void)scrollWheel:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)rightMouseDown:(id)fp8;
- (void)rightMouseDragged:(id)fp8;
- (void)rightMouseUp:(id)fp8;
- (void)otherMouseDown:(id)fp8;
- (void)otherMouseDragged:(id)fp8;
- (void)otherMouseUp:(id)fp8;
- (void)tabletPoint:(id)fp8;
- (void)tabletProximity:(id)fp8;
- (void)copy:(id)fp8;

@end

@interface NSOpenGLContext_QuartzComposer : NSOpenGLContext
{
}

- (BOOL)isMemberOfClass:(Class)fp8;
- (void)_surfaceWillGoAway:(id)fp8;
- (void)_surfaceDidComeBack:(id)fp8;

@end

@interface QCFullScreenWindow : NSWindow
{
    struct _CGDirectDisplayID *_displayID;
}

- (id)initWithScreen:(id)fp8;
- (struct _CGDirectDisplayID *)displayID;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;
- (void)sendEvent:(id)fp8;

@end

@interface QCView (IBExtensions)
- (void)start:(id)fp8;
- (void)stop:(id)fp8;
@end

@interface QCProgrammablePatch : QCPatch
{
    NSMutableDictionary *_sources;
    NSMutableDictionary *_compileStatus;
    GFList *_parameterTypes;
    NSMutableArray *_parameterPorts;
}

+ (id)sourceTypes;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (void)setSource:(id)fp8 ofType:(id)fp12;
- (id)sourceOfType:(id)fp8;
- (id)compileStatusForSourceOfType:(id)fp8;
- (id)compileSourceOfType:(id)fp8;
- (BOOL)setParameterList:(id)fp8;
- (id)parameterList;
- (id)parameterPorts;
- (id)state;
- (BOOL)setState:(id)fp8;

@end

@interface QCParameterInfo : NSObject
{
    int type;
    unsigned int size;
}

+ (id)skipParameter;
+ (id)infoWithType:(int)fp8 size:(unsigned int)fp12;
- (id)initWithType:(int)fp8 size:(unsigned int)fp12;
- (BOOL)isEqualTo:(id)fp8;

@end

@interface QCThreadPatch : QCPatch
{
    struct _opaque_pthread_mutex_t _resultMutex;
    id _result;
    SEL _threadSelector;
    struct _opaque_pthread_mutex_t _threadMutex;
    struct _opaque_pthread_cond_t _threadCondition;
    BOOL _threadRunning;
}

- (id)initWithIdentifier:(id)fp8;
- (void)_finalize_QCThreadPatch;
- (void)finalize;
- (void)dealloc;
- (void)_thread:(id)fp8;
- (BOOL)runThreadWithSelector:(SEL)fp8 argument:(id)fp12;
- (BOOL)isThreadRunning;
- (void)waitUntilThreadDone;
- (void)setThreadResult:(id)fp8;
- (id)getThreadResult;
- (BOOL)_execute:(double)fp8 arguments:(id)fp16;

@end

@interface QCImagePatch : QCThreadPatch
{
    unsigned int _width;
    unsigned int _height;
    unsigned int _target;
    int _filter;
    int _wrap;
    CDAnonymousStruct4 _color;
    unsigned int _levels;
    float _anisotropy;
}

- (id)initWithIdentifier:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (unsigned int)width;
- (unsigned int)height;
- (unsigned long)target;
- (unsigned int)mipmapLevels;
- (void)setTarget:(unsigned long)fp8 width:(unsigned int)fp12 height:(unsigned int)fp16 mipmapLevels:(unsigned int)fp20;
- (int)filteringMode;
- (int)wrappingMode;
- (CDAnonymousStruct3)borderColor;
- (float)anisotropy;
- (void)setFilteringMode:(int)fp8 wrappingMode:(int)fp12 borderColor:(CDAnonymousStruct3)fp16 anisotropy:(float)fp32;
- (id)image;
- (void)_setParametersOnImage:(id)fp8;
- (void)setImageParameters;
- (void)resetImage;
- (id)imageOptionsWithScalingMode:(id)fp8 flipped:(BOOL)fp12;

@end

@interface QCInterpolationPort : QCIndexPort
{
}

- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (double)interpolate:(double)fp8;

@end

@interface QCSourceTextView : NSTextView
{
    NSTextField *statusField;
    NSDictionary *_keywords;
    NSColor *_comments;
    NSColor *_errors;
    QCProgrammablePatch *_targetPatch;
    NSString *_sourceType;
}

+ (id)_keywordsAndColorsFromXML:(id)fp8;
- (void)_finishInitialization;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (void)_colorizeSyntaxWithColorsForKeywords:(id)fp8 comments:(id)fp12;
- (void)insertNewline:(id)fp8;
- (void)_highlightLine:(unsigned int)fp8 withColor:(id)fp12;
- (void)_highlightAllLinesWithColor:(id)fp8;
- (void)_compileSource;
- (void)setTargetPatch:(id)fp8 sourceType:(id)fp12;
- (void)textDidChange:(id)fp8;
- (void)setStatusField:(id)fp8;
- (id)statusField;

@end

@interface QCImagePatchUI : QCInspector
{
    NSPopUpButton *targetMenu;
    NSTextField *widthField;
    NSTextField *heightField;
    NSPopUpButton *filterMenu;
    NSPopUpButton *wrapMenu;
    NSColorWell *borderColor;
    NSSlider *mipmapSlider;
    NSSlider *anisotropySlider;
}

- (void)didLoadNib;
- (void)setupUI:(id)fp8;
- (void)setupViewForPatch:(id)fp8;
- (void)updateSize:(id)fp8;
- (void)updateParameters:(id)fp8;

@end

@interface QCFileImageView : NSImageView
{
}

- (unsigned int)draggingEntered:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;

@end

@interface QCTableView : NSTableView
{
}

- (void)textDidEndEditing:(id)fp8;

@end

@interface QCRenderer : NSObject
{
    void *_QCRendererPrivate;
}

- (id)init;
- (id)initWithOpenGLContext:(id)fp8 pixelFormat:(id)fp12 file:(id)fp16;
- (void)finalize;
- (void)dealloc;
- (BOOL)renderAtTime:(double)fp8 arguments:(id)fp16;
- (id)attributes;
- (id)inputKeys;
- (id)outputKeys;
- (BOOL)setValue:(id)fp8 forInputKey:(id)fp12;
- (id)valueForInputKey:(id)fp8;
- (id)valueForOutputKey:(id)fp8;
- (id)_context;

@end

@interface QC3DShape : QCPatch
{
    QCNumberPort *inputX;
    QCNumberPort *inputY;
    QCNumberPort *inputZ;
    QCNumberPort *inputRX;
    QCNumberPort *inputRY;
    QCNumberPort *inputRZ;
    QCNumberPort *inputScale;
    QCGLPort_Color *inputColor;
    QCGLPort_Image *inputImage;
    QCGLPort_Blending *inputBlending;
    QCGLPort_ZBuffer *inputZBuffer;
    QCGLPort_Culling *inputCulling;
    int _mode;
}

+ (void)_initialize_cube;
+ (void)_initialize_grid;
+ (void)_initialize_sphere;
+ (void)_initialize_torus;
+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCBillboard : QCPatch
{
    QCGLPort_Image *inputImage;
    QCGLPort_Image *inputMask;
    QCNumberPort *inputX;
    QCNumberPort *inputY;
    QCNumberPort *inputRotation;
    QCNumberPort *inputScale;
    QCGLPort_Color *inputColor;
    QCGLPort_Blending *inputBlending;
    BOOL _directCIRendering;
    BOOL _pixelAligned;
    BOOL _squarePixels;
    CIImage *_ciImage;
    CIFilter *_colorFilter;
    CIFilter *_maskFilter;
}

+ (unsigned int)stateVersion;
+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;
- (BOOL)isCIRenderingEnabled;
- (void)setCIRenderingEnabled:(BOOL)fp8;
- (BOOL)isPixelAligned;
- (void)setPixelAligned:(BOOL)fp8;
- (BOOL)isSquarePixels;
- (void)setSquarePixels:(BOOL)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;

@end

@interface QCCamera : QCPatch
{
    QCNumberPort *inputOriginX;
    QCNumberPort *inputOriginY;
    QCNumberPort *inputOriginZ;
    QCNumberPort *inputRotateX;
    QCNumberPort *inputRotateY;
    QCNumberPort *inputRotateZ;
    QCNumberPort *inputTranslateX;
    QCNumberPort *inputTranslateY;
    QCNumberPort *inputTranslateZ;
}

+ (int)executionMode;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCClear : QCPatch
{
    QCColorPort *inputColor;
    BOOL _clearDepthBuffer;
    BOOL _clearColorBuffer;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (void)setClearsColorBuffer:(BOOL)fp8;
- (BOOL)clearsColorBuffer;
- (void)setClearsDepthBuffer:(BOOL)fp8;
- (BOOL)clearsDepthBuffer;
- (id)initWithIdentifier:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCClock : QCPatch
{
    QCBooleanPort *inputStartSignal;
    QCBooleanPort *inputStopSignal;
    QCBooleanPort *inputResetSignal;
    QCNumberPort *outputTime;
    BOOL _lastStartSignal;
    BOOL _lastStopSignal;
    BOOL _lastResetSignal;
    double _startTime;
    double _stopTime;
}

+ (BOOL)allowsSubpatches;
+ (int)timeMode;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCColorFromComponents : QCPatch
{
    QCNumberPort *input1;
    QCNumberPort *input2;
    QCNumberPort *input3;
    QCNumberPort *inputAlpha;
    QCColorPort *outputColor;
    int _mode;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCColorMask : QCPatch
{
    QCBooleanPort *inputRed;
    QCBooleanPort *inputGreen;
    QCBooleanPort *inputBlue;
    QCBooleanPort *inputAlpha;
}

+ (int)executionMode;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCColorMixer : QCPatch
{
    QCColorPort *inputColor1;
    QCColorPort *inputColor2;
    QCNumberPort *inputMix;
    QCIndexPort *inputMode;
    QCColorPort *outputColor;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCColorToComponents : QCPatch
{
    QCColorPort *inputColor;
    QCNumberPort *output1;
    QCNumberPort *output2;
    QCNumberPort *output3;
    QCNumberPort *outputAlpha;
    int _mode;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCColorTransform : QCPatch
{
    QCColorPort *inputColor;
    QCNumberPort *inputHue;
    QCNumberPort *inputSaturation;
    QCNumberPort *inputLuminosity;
    QCNumberPort *inputAlpha;
    QCColorPort *outputColor;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCConditional : QCPatch
{
    QCNumberPort *inputValue1;
    QCIndexPort *inputTest;
    QCNumberPort *inputValue2;
    QCNumberPort *inputTolerance;
    QCBooleanPort *outputResult;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCCounter : QCPatch
{
    QCBooleanPort *inputSignal;
    QCBooleanPort *inputSignalDown;
    QCBooleanPort *inputSignalReset;
    QCIndexPort *outputCount;
    BOOL _lastSignal;
    BOOL _lastSignalDown;
    BOOL _lastSignalReset;
}

+ (BOOL)allowsSubpatches;
- (id)setup:(id)fp8;
- (void)enable:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCCube : QCPatch
{
    QCNumberPort *inputX;
    QCNumberPort *inputY;
    QCNumberPort *inputZ;
    QCNumberPort *inputRX;
    QCNumberPort *inputRY;
    QCNumberPort *inputRZ;
    QCNumberPort *inputWidth;
    QCNumberPort *inputHeight;
    QCNumberPort *inputDepth;
    QCGLPort_Color *inputColorFront;
    QCGLPort_Image *inputImageFront;
    QCGLPort_Color *inputColorLeft;
    QCGLPort_Image *inputImageLeft;
    QCGLPort_Color *inputColorRight;
    QCGLPort_Image *inputImageRight;
    QCGLPort_Color *inputColorBack;
    QCGLPort_Image *inputImageBack;
    QCGLPort_Color *inputColorTop;
    QCGLPort_Image *inputImageTop;
    QCGLPort_Color *inputColorBottom;
    QCGLPort_Image *inputImageBottom;
    QCGLPort_Blending *inputBlending;
    QCGLPort_ZBuffer *inputZBuffer;
    QCGLPort_Culling *inputCulling;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCFog : QCPatch
{
    QCIndexPort *inputType;
    QCColorPort *inputColor;
    QCNumberPort *inputDensity;
    QCNumberPort *inputStart;
    QCNumberPort *inputEnd;
    QCIndexPort *inputQuality;
    QCIndexPort *inputMode;
    BOOL _modeSupported;
}

+ (int)executionMode;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCFPSDisplay : QCPatch
{
    QCIndexPort *inputMode;
    unsigned int _frameCount;
    float _fps;
    float _fpsMin;
    double _lastTime;
    double _fpsTime;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (void)enable:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCGradient : QCPatch
{
    QCIndexPort *inputDirection;
    QCColorPort *inputColor1;
    QCColorPort *inputColor2;
    QCColorPort *inputColor3;
    QCGLPort_Blending *inputBlending;
    BOOL _clearDepthBuffer;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (void)setClearsDepthBuffer:(BOOL)fp8;
- (BOOL)clearsDepthBuffer;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCHostInfo : QCPatch
{
    QCStringPort *outputUserName;
    QCStringPort *outputLongUserName;
    QCStringPort *outputComputerName;
    QCStringPort *outputHostName;
    QCStringPort *outputIPAddress;
    QCStringPort *outputOSVersion;
    QCStringPort *outputKernelVersion;
    QCIndexPort *outputRAMSize;
    QCStringPort *outputCPUType;
    QCIndexPort *outputCPUCount;
    QCNumberPort *outputCPULoad_1;
    QCNumberPort *outputCPULoad_2;
    struct processor_cpu_load_info *_savedTicks;
    unsigned int _savedSize;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (void)finalize;
- (void)dealloc;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCImageFilter : QCImagePatch
{
    QCGLImagePort *outputImage;
    CIFilter *_ciFilter;
    GFList *_paramList;
}

+ (BOOL)allowsSubpatches;
+ (id)attributesWithIdentifier:(id)fp8;
- (id)_baseKey;
- (id)_inputPortAttributesWithKey:(id)fp8 index:(unsigned int)fp12 count:(unsigned int)fp16 type:(id)fp20;
- (id)image;
- (void)resetImage;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (id)state;
- (BOOL)setState:(id)fp8;

@end

@interface QCInterpolation : QCPatch
{
    QCNumberPort *inputValue1;
    QCNumberPort *inputValue2;
    QCNumberPort *inputDuration;
    QCNumberPort *inputTension;
    QCIndexPort *inputRepeat;
    QCNumberPort *outputValue;
    QCInterpolationPort *_interpolationPort;
    unsigned int _pointCount;
    unsigned int _pointMax;
    double *_pointTimeBuffer;
    double *_pointValueBuffer;
    struct __QCSpline *_splineRef;
}

+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (void)_finalize_QCInterpolation;
- (void)finalize;
- (void)dealloc;
- (void)_updateSpline;
- (double)valueAtTime:(double)fp8;
- (void)setCustomInterpolation:(BOOL)fp8;
- (BOOL)customInterpolation;
- (unsigned int)controlPointsCount;
- (double)timeForControlPoint:(unsigned int)fp8;
- (double)valueForControlPoint:(unsigned int)fp8;
- (unsigned int)addControlPointAtTime:(double)fp8 withValue:(double)fp16;
- (BOOL)setControlPoint:(unsigned int)fp8 time:(double)fp12 value:(double)fp20;
- (void)removeControlPoint:(unsigned int)fp8;
- (int)nearestControlPointAtTime:(double)fp8 andValue:(double)fp16 withTolerance:(double)fp24;
- (id)state;
- (BOOL)setState:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCLFO : QCPatch
{
    QCIndexPort *inputType;
    QCNumberPort *inputPeriod;
    QCNumberPort *inputPhase;
    QCNumberPort *inputAmplitude;
    QCNumberPort *inputOffset;
    QCNumberPort *inputPWMRatio;
    QCNumberPort *outputValue;
    double _randomTime;
    double _randomValue;
    int _seed;
}

+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCLighting : QCPatch
{
    QCNumberPort *inputObjectSpecular;
    QCNumberPort *inputObjectShininess;
    QCColorPort *inputAmbientColor;
    BOOL _twoSideLighting;
    NSMutableArray *_lightPorts;
}

+ (int)executionMode;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (unsigned int)numberOfLights;
- (void)setNumberOfLights:(unsigned int)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (BOOL)twoSideLighting;
- (void)setTwoSideLighting:(BOOL)fp8;
- (id)_lightPortList;
- (id)state;
- (BOOL)setState:(id)fp8;

@end

@interface QCLines : QCPatch
{
    QCNumberPort *inputStartX;
    QCNumberPort *inputStartY;
    QCNumberPort *inputStartZ;
    QCNumberPort *inputStartRX;
    QCNumberPort *inputStartRY;
    QCNumberPort *inputStartRZ;
    QCNumberPort *inputStartLength;
    QCColorPort *inputStartColor;
    QCNumberPort *inputAttractionAmount;
    QCNumberPort *inputAttractionX;
    QCNumberPort *inputAttractionY;
    QCNumberPort *inputAttractionZ;
    QCNumberPort *inputEndX;
    QCNumberPort *inputEndY;
    QCNumberPort *inputEndZ;
    QCNumberPort *inputEndRX;
    QCNumberPort *inputEndRY;
    QCNumberPort *inputEndRZ;
    QCNumberPort *inputEndLength;
    QCColorPort *inputEndColor;
    QCNumberPort *inputNumLines;
    QCGLPort_ZBuffer *inputZBuffer;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCLog : QCPatch
{
    QCVirtualPort *inputValue;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCLogic : QCPatch
{
    QCBooleanPort *inputValue1;
    QCIndexPort *inputOperation;
    QCBooleanPort *inputValue2;
    QCBooleanPort *outputResult;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCMath : QCPatch
{
    QCNumberPort *inputValue;
    QCNumberPort *outputValue;
    NSMutableArray *_operationPorts;
}

+ (BOOL)allowsSubpatches;
- (unsigned int)numberOfOperations;
- (void)setNumberOfOperations:(unsigned int)fp8;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (id)state;
- (BOOL)setState:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCMouse : QCPatch
{
    QCNumberPort *outputX;
    QCNumberPort *outputY;
    QCBooleanPort *outputButton1;
    QCBooleanPort *outputButton2;
}

+ (int)executionMode;
+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCMultiplexer : QCPatch
{
    QCIndexPort *inputIndex;
    NSMutableArray *_inPorts;
    QCPort *_outPort;
}

+ (BOOL)allowsSubpatches;
- (id)_activePort;
- (unsigned int)numberOfPorts;
- (void)setNumberOfPorts:(unsigned int)fp8;
- (Class)portClass;
- (void)setPortClass:(Class)fp8;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (id)state;
- (BOOL)setState:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCGLImagePort : QCObjectPort
{
}

+ (Class)baseClass;
- (Class)objectClass;
- (id)imageValue;
- (void)setImageValue:(id)fp8;

@end

@interface MultiplexerImagePort : QCGLImagePort
{
}

- (BOOL)_execute:(double)fp8 arguments:(id)fp16;

@end

@interface MultiplexerStructurePort : QCStructurePort
{
}

- (BOOL)_execute:(double)fp8 arguments:(id)fp16;

@end

@interface MultiplexerStringPort : QCStringPort
{
}

- (BOOL)_execute:(double)fp8 arguments:(id)fp16;

@end

@interface MultiplexerColorPort : QCColorPort
{
}

- (BOOL)_execute:(double)fp8 arguments:(id)fp16;

@end

@interface MultiplexerNumberPort : QCNumberPort
{
}

- (BOOL)_execute:(double)fp8 arguments:(id)fp16;

@end

@interface MultiplexerIndexPort : QCIndexPort
{
}

- (BOOL)_execute:(double)fp8 arguments:(id)fp16;

@end

@interface MultiplexerBooleanPort : QCBooleanPort
{
}

- (BOOL)_execute:(double)fp8 arguments:(id)fp16;

@end

@interface MultiplexerVirtualPort : QCVirtualPort
{
}

- (BOOL)_execute:(double)fp8 arguments:(id)fp16;

@end

@interface QCOpenGLInfo : QCPatch
{
    QCStringPort *outputVendor;
    QCStringPort *outputRenderer;
    QCNumberPort *outputVersion;
    QCIndexPort *outputVRAM;
    QCBooleanPort *outputCIAccelerated;
    NSMutableArray *_extensionPorts;
}

+ (BOOL)allowsSubpatches;
- (id)extensions;
- (BOOL)addExtension:(id)fp8;
- (void)removeExtension:(id)fp8;
- (id)initWithIdentifier:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (void)dealloc;

@end

@interface QCParticleSystem : QCPatch
{
    QCNumberPort *inputPositionX;
    QCNumberPort *inputPositionY;
    QCNumberPort *inputPositionZ;
    QCColorPort *inputColor;
    QCNumberPort *inputVelocityMinX;
    QCNumberPort *inputVelocityMaxX;
    QCNumberPort *inputVelocityMinY;
    QCNumberPort *inputVelocityMaxY;
    QCNumberPort *inputVelocityMinZ;
    QCNumberPort *inputVelocityMaxZ;
    QCNumberPort *inputMinSize;
    QCNumberPort *inputMaxSize;
    QCNumberPort *inputLifeTime;
    QCNumberPort *inputSizeDelta;
    QCNumberPort *inputOpacityDelta;
    QCNumberPort *inputAttraction;
    QCNumberPort *inputGravity;
    QCGLPort_Image *inputImage;
    QCGLPort_Blending *inputBlending;
    unsigned int _numParticles;
    double _startUpDelay;
    int _seed;
    void *_particleBuffer;
    unsigned int _particlesSeen;
}

+ (int)executionMode;
+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (void)_initParticle:(CDAnonymousStruct2 *)fp8 atTime:(double)fp12;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (unsigned int)numberOfParticles;
- (void)setNumberOfParticles:(unsigned int)fp8;
- (double)startUpDelay;
- (void)setStartUpDelay:(double)fp8;

@end

@interface QCPsychedelic : QCPatch
{
    QCGLPort_Image *inputImage;
    QCGLPort_Color *inputColor;
    QCNumberPort *inputSpeed;
    QCNumberPort *inputScale;
    QCGLPort_Blending *inputBlending;
    BOOL _clearDepthBuffer;
}

+ (int)executionMode;
+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (void)setClearsDepthBuffer:(BOOL)fp8;
- (BOOL)clearsDepthBuffer;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCRandom : QCPatch
{
    QCNumberPort *inputMin;
    QCNumberPort *inputMax;
    QCNumberPort *outputValue;
    double _variability;
    double _lastTime;
    double _lastSampleTime;
    int _seed;
}

+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (id)state;
- (BOOL)setState:(id)fp8;
- (double)variability;
- (void)setVariability:(double)fp8;

@end

@interface QCRangeValue : QCPatch
{
    QCNumberPort *inputValue;
    QCNumberPort *inputMin;
    QCNumberPort *inputMax;
    QCNumberPort *outputClip;
    QCNumberPort *outputRoll;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCBonjourServices : QCThreadPatch
{
    QCStructurePort *outputServices;
    NSString *_serviceType;
    struct __CFNetServiceBrowser *_browser;
    struct __CFDictionary *_serviceList;
    struct __CFRunLoop *_runLoop;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)serviceType;
- (void)setServiceType:(id)fp8;
- (struct __CFDictionary *)_serviceList;
- (void)_bonjourThread:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;

@end

@interface QCReplicator : QCPatch
{
    QCIndexPort *inputCopies;
    QCInterpolationPort *inputInterpolation;
    QCNumberPort *inputScale;
    QCNumberPort *inputOrientationX;
    QCNumberPort *inputOrientationY;
    QCNumberPort *inputOrientationZ;
    QCNumberPort *inputOriginX;
    QCNumberPort *inputOriginY;
    QCNumberPort *inputOriginZ;
    QCNumberPort *inputRotationX;
    QCNumberPort *inputRotationY;
    QCNumberPort *inputRotationZ;
    QCNumberPort *inputTranslationX;
    QCNumberPort *inputTranslationY;
    QCNumberPort *inputTranslationZ;
}

+ (int)executionMode;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCRoundValue : QCPatch
{
    QCNumberPort *inputValue;
    QCNumberPort *outputRound;
    QCNumberPort *outputFloor;
    QCNumberPort *outputCeil;
}

+ (BOOL)allowsSubpatches;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCRSSParser : QCThreadPatch
{
    QCStringPort *inputURL;
    QCBooleanPort *inputSignal;
    QCStructurePort *outputChannel;
    QCStructurePort *outputItems;
    QCBooleanPort *outputSignal;
    BOOL _lastSignal;
    BOOL _rerun;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (void)_parserThread:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;

@end

@interface RSSParser : NSObject
{
    NSURL *_url;
    NSMutableDictionary *_info;
    NSMutableArray *_items;
}

+ (id)parserWithURL:(id)fp8;
- (id)initWithURL:(id)fp8;
- (void)dealloc;
- (id)url;
- (id)channelInfo;
- (id)channelItems;

@end

@interface NSString (HTMLAttributesEscaping)
- (id)_unescapeHTMLAttributes:(BOOL)fp8;
@end

@interface QCSampleHold : QCPatch
{
    QCNumberPort *inputValue;
    QCBooleanPort *inputSignal;
    QCNumberPort *outputValue;
    BOOL _lastSignal;
}

+ (BOOL)allowsSubpatches;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCScreenInfo : QCPatch
{
    QCNumberPort *outputWidth;
    QCNumberPort *outputHeight;
    QCIndexPort *outputPixelsWide;
    QCIndexPort *outputPixelsHigh;
    QCNumberPort *outputRatio;
    QCNumberPort *outputResolution;
    BOOL _cleanAperture;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (void)setUseCleanAperture:(BOOL)fp8;
- (BOOL)useCleanAperture;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCSignal : QCPatch
{
    QCIndexPort *inputMode;
    QCNumberPort *inputParam;
    QCBooleanPort *outputSignal;
    double _fireTime;
}

+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (void)enable:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCSplitter : QCPatch
{
    QCPort *_inPort;
    QCPort *_outPort;
    double _min;
    double _max;
}

+ (BOOL)allowsSubpatches;
- (void)_configurePort;
- (Class)portClass;
- (void)setPortClass:(Class)fp8;
- (double)portMinValue;
- (void)setPortMinValue:(double)fp8;
- (double)portMaxValue;
- (void)setPortMaxValue:(double)fp8;
- (id)initWithIdentifier:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCSprite : QCPatch
{
    QCNumberPort *inputX;
    QCNumberPort *inputY;
    QCNumberPort *inputZ;
    QCNumberPort *inputRX;
    QCNumberPort *inputRY;
    QCNumberPort *inputRZ;
    QCNumberPort *inputWidth;
    QCNumberPort *inputHeight;
    QCGLPort_Color *inputColor;
    QCGLPort_Image *inputImage;
    QCGLPort_Blending *inputBlending;
    QCGLPort_ZBuffer *inputZBuffer;
    QCGLPort_Culling *inputCulling;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCStringComponents : QCPatch
{
    QCStringPort *inputString;
    QCStringPort *inputSeparator;
    QCStructurePort *outputComponents;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCStringLength : QCPatch
{
    QCStringPort *inputString;
    QCIndexPort *outputLength;
}

+ (BOOL)allowsSubpatches;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCTime : QCPatch
{
    QCNumberPort *outputTime;
}

+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCTrackBall : QCPatch
{
    QCNumberPort *inputOriginX;
    QCNumberPort *inputOriginY;
    QCNumberPort *inputOriginZ;
    float _sensibility;
    float _inertia;
    float _friction;
    BOOL _tracking;
    BOOL _wasTracking;
    CDAnonymousStruct1 _start;
    CDAnonymousStruct1 _last;
    CDAnonymousStruct5 _orientation;
    CDAnonymousStruct5 _saveOrientation;
    float _rotationSpeed;
    CDAnonymousStruct1 _rotationAxis;
    double _lastTime;
    double _moveTime;
}

+ (int)executionMode;
- (id)initWithIdentifier:(id)fp8;
- (void)setSensibility:(float)fp8;
- (float)sensibility;
- (void)_setTimebase:(int)fp8;
- (void)setInertia:(float)fp8;
- (float)inertia;
- (void)setFriction:(float)fp8;
- (float)friction;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (void)enable:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCProxyPort (QCGLImagePort)
- (id)imageValue;
- (void)setImageValue:(id)fp8;
@end

@interface QCObjectPort (QCGLObject)
- (id)rawValue;
@end

@interface QCGLObject : QCObject
{
    QCOpenGLContext *_context;
    void *_unused2[4];
}

+ (id)allocWithZone:(struct _NSZone *)fp8;
- (void)didRegisterWithOpenGLContext;
- (void)willUnregisterFromOpenGLContext;
- (void)registerWithOpenGLContext:(id)fp8;
- (void)unregisterFromOpenGLContext;
- (id)openGLContext;
- (void)_setContext:(id)fp8;
- (void)finalize;
- (void)dealloc;

@end

@interface QCGLImage : QCGLObject
{
    int _type;
    unsigned int _pixelsWide;
    unsigned int _pixelsHigh;
    float _pixelsAspectRatio;
    unsigned int _textureName;
    unsigned int _textureTarget;
    unsigned int _textureLevels;
    float _textureMatrix[16];
    unsigned int _textureFlags;
    float _textureAnisotropy;
    int _textureWrapping;
    int _textureFiltering;
    CDAnonymousStruct4 _textureBorderColor;
    void *_bufferAddress;
    unsigned int _bufferRowBytes;
    unsigned int _bufferPixelComponents;
    unsigned int _bufferPixelSize;
    unsigned int _bufferFormat;
    unsigned int _bufferType;
    void *_bufferCallback;
    void *_bufferUserInfo;
    BOOL _bufferUploaded;
    BOOL _bufferDownloaded;
    CIImage *_ciImage;
    QCPBuffer *_ciImagePBuffer;
    unsigned int _ciImageTextureName;
    NSData *_bufferData;
    NSData *_rawData;
    struct CGImage *_cgImage;
    NSImage *_nsImage;
    void *_scratchBufferAddress;
    unsigned char _saveEnabled;
    void *_unused3[4];
}

- (void)_finalize_QCGLImage;
- (void)finalize;
- (void)dealloc;
- (unsigned int)pixelsWide;
- (unsigned int)pixelsHigh;
- (float)pixelsAspectRatio;
- (unsigned long)textureTarget;
- (const float *)textureMatrix;
- (unsigned int)textureMipmapLevels;
- (BOOL)flipped;
- (BOOL)_setTextureParameters;
- (void)setTextureWrappingMode:(int)fp8;
- (int)textureWrappingMode;
- (void)setTextureFilteringMode:(int)fp8;
- (int)textureFilteringMode;
- (void)setTextureAnisotropy:(float)fp8;
- (float)textureAnisotropy;
- (void)setTextureBorderColor:(CDAnonymousStruct3)fp8;
- (CDAnonymousStruct3)textureBorderColor;
- (unsigned long)textureName;
- (id)bufferData;
- (id)rawData;
- (struct CGImage *)CGImage;
- (id)CIImage;

@end

@interface QCGLImage (Private)
- (id)_initWithBaseType:(int)fp8 pixelsWide:(unsigned int)fp12 pixelsHigh:(unsigned int)fp16 options:(id)fp20;
- (void)_setBuffer:(void *)fp8 rowBytes:(unsigned int)fp12 format:(unsigned long)fp16 type:(unsigned long)fp20 releaseCallback:(void *)fp24 userInfo:(void *)fp28;
- (void *)_bufferAddress;
- (unsigned int)_bufferRowBytes;
- (unsigned long)_bufferFormat;
- (unsigned long)_bufferType;
- (unsigned int)_bufferPixelComponents;
- (unsigned int)_bufferPixelSize;
- (void)_createScratchBuffer;
- (void *)_scratchBufferAddress;
- (void)_setTextureOnContext:(struct _CGLContextObject *)fp8 unit:(unsigned long)fp12 useTransformationMatrix:(BOOL)fp16;
- (void)_unsetTextureOnContext:(struct _CGLContextObject *)fp8 unit:(unsigned long)fp12;
- (int)_baseType;
- (void)_setBaseTextureName:(unsigned long)fp8;
- (unsigned long)_baseTextureName;
- (const float *)_baseTextureMatrix;
@end

@interface QCGLImage (Texture)
- (BOOL)_createTexture;
- (void)_deleteTexture;
- (BOOL)_uploadTexture:(BOOL)fp8;
- (BOOL)_downloadTexture;
@end

@interface QCGLImage (Override)
- (id)init;
- (void)didChange;
- (void)didRegisterWithOpenGLContext;
- (void)willUnregisterFromOpenGLContext;
- (id)stateValue;
- (id)initWithStateValue:(id)fp8;
- (id)description;
@end

@interface QCPBuffer : NSObject
{
    struct _CGLPBufferObject *_pBuffer;
    unsigned int _target;
    unsigned int _width;
    unsigned int _height;
    unsigned int _levels;
}

+ (id)pBufferWithTarget:(unsigned long)fp8 pixelsWide:(unsigned int)fp12 pixelsHigh:(unsigned int)fp16 mipmapLevels:(unsigned int)fp20;
- (id)init;
- (id)initWithTarget:(unsigned long)fp8 pixelsWide:(unsigned int)fp12 pixelsHigh:(unsigned int)fp16 mipmapLevels:(unsigned int)fp20;
- (void)finalize;
- (void)dealloc;
- (void)_destroyPBuffer;
- (BOOL)setTarget:(unsigned long)fp8 pixelsWide:(unsigned int)fp12 pixelsHigh:(unsigned int)fp16 mipmapLevels:(unsigned int)fp20;
- (struct _CGLPBufferObject *)_CGLPBufferObj;
- (unsigned long)target;
- (unsigned int)pixelsWide;
- (unsigned int)pixelsHigh;
- (unsigned int)mipmapLevels;
- (BOOL)attachToCGLContext:(struct _CGLContextObject *)fp8;
- (BOOL)texImage:(struct _CGLContextObject *)fp8;
- (id)description;

@end

@interface QCPBufferPoolItem : QCPBuffer
{
    unsigned int _retainCount;
    double _timestamp;
    double _freeTime;
}

- (id)initWithTarget:(unsigned long)fp8 pixelsWide:(unsigned int)fp12 pixelsHigh:(unsigned int)fp16 mipmapLevels:(unsigned int)fp20;
- (double)_freeTime;
- (double)freeTime;
- (unsigned int)retainCount;
- (id)retain;
- (oneway void)release;

@end

@interface QCPatch (GLError)
- (BOOL)checkForGLError;
@end

@interface QCDrawable : QCPBuffer
{
    struct _CGLContextObject *_glContext;
    struct _CGLPixelFormatObject *_pixelFormat;
    QCOpenGLContext *_context;
    void *_unused[4];
}

+ (id)drawableWithSharedContext:(id)fp8 target:(unsigned long)fp12 pixelsWide:(unsigned int)fp16 pixelsHigh:(unsigned int)fp20 mipmapLevels:(unsigned int)fp24 options:(id)fp28;
- (id)initWithSharedContext:(id)fp8 target:(unsigned long)fp12 pixelsWide:(unsigned int)fp16 pixelsHigh:(unsigned int)fp20 mipmapLevels:(unsigned int)fp24 options:(id)fp28;
- (void)_finalize_QCDrawable;
- (void)finalize;
- (void)dealloc;
- (void)_destroyPBuffer;
- (BOOL)setTarget:(unsigned long)fp8 pixelsWide:(unsigned int)fp12 pixelsHigh:(unsigned int)fp16 mipmapLevels:(unsigned int)fp20;
- (id)context;
- (struct _CGLContextObject *)_CGLContextObj;
- (struct _CGLPixelFormatObject *)_CGLPixelFormatObj;
- (BOOL)attachToCGLContext:(struct _CGLContextObject *)fp8;

@end

@interface QCOpenGLContext (QCUtilities)
+ (unsigned int)minSupportedTextureSizeForTarget:(unsigned long)fp8;
+ (unsigned int)maxSupportedTextureSizeForTarget:(unsigned long)fp8;
+ (BOOL)checkTextureWidth:(unsigned int *)fp8 height:(unsigned int *)fp12 forTarget:(unsigned long)fp16 outPixelRatio:(float *)fp20;
- (BOOL)isExtensionSupported:(id)fp8;
- (long)_rendererPropertyValue:(int)fp8;
- (unsigned int)videoMemorySize;
- (unsigned int)textureMemorySize;
- (long)rendererID;
@end

@interface QCGLPort_Image : QCGLImagePort <QCGLPort>
{
}

- (void)set:(struct _CGLContextObject *)fp8;
- (void)unset:(struct _CGLContextObject *)fp8;
- (void)set:(struct _CGLContextObject *)fp8 unit:(unsigned long)fp12 useTransformationMatrix:(BOOL)fp16;
- (void)unset:(struct _CGLContextObject *)fp8 unit:(unsigned long)fp12;

@end

@interface QCGLPort_Blending : QCIndexPort <QCGLPort>
{
    unsigned char _enabled;
    int _sourceFunction;
    int _destFunction;
}

- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (void)set:(struct _CGLContextObject *)fp8;
- (void)unset:(struct _CGLContextObject *)fp8;

@end

@interface QCGLPort_Culling : QCIndexPort <QCGLPort>
{
    unsigned char _enabled;
    int _mode;
}

- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (void)set:(struct _CGLContextObject *)fp8;
- (void)unset:(struct _CGLContextObject *)fp8;

@end

@interface QCGLPort_ZBuffer : QCIndexPort <QCGLPort>
{
    unsigned char _enabled;
    int _function;
    int _mask;
}

- (id)initWithNode:(id)fp8 arguments:(id)fp12;
- (void)set:(struct _CGLContextObject *)fp8;
- (void)unset:(struct _CGLContextObject *)fp8;

@end

@interface QCGLPort_Color : QCColorPort <QCGLPort>
{
}

- (void)set:(struct _CGLContextObject *)fp8;
- (void)unset:(struct _CGLContextObject *)fp8;

@end

@interface QCData : NSData
{
    void *_bytes;
    unsigned int _length;
    void *_callback;
    void *_info;
}

- (id)initWithBytes:(const void *)fp8 length:(unsigned int)fp12 callback:(void *)fp16 info:(void *)fp20;
- (void)finalize;
- (void)dealloc;
- (unsigned int)length;
- (const void *)bytes;

@end

@interface QCGLCVImage : QCGLImage
{
    BOOL _colorCorrection;
    struct __CVBuffer *_image;
    struct __CVBuffer *_imageTexture;
    CIImage *_imageCI;
    QCPBuffer *_imageBuffer;
    void *_unused4[4];
}

- (id)initWithCVImageBuffer:(struct __CVBuffer *)fp8 options:(id)fp12;
- (void)finalize;
- (void)dealloc;

@end

@interface QCGLTextureImage : QCGLImage
{
    unsigned int _name;
    id _owner;
    void *_unused4[4];
}

- (id)initWithTextureName:(unsigned long)fp8 pixelsWide:(unsigned int)fp12 pixelsHigh:(unsigned int)fp16 options:(id)fp20;
- (void)dealloc;
- (id)_owner;

@end

@interface QCGLCIImage : QCGLImage
{
    CIImage *_image;
    QCPBuffer *_pBuffer;
    void *_unused4[4];
}

- (id)initWithCIImage:(id)fp8 options:(id)fp12;
- (void)dealloc;

@end

@interface QCGLCGImage : QCGLImage
{
    struct CGImage *_image;
    void *_unused4[4];
}

- (id)initWithFile:(id)fp8 options:(id)fp12;
- (id)initWithURL:(id)fp8 options:(id)fp12;
- (id)initWithRawData:(id)fp8 options:(id)fp12;
- (id)_initWithCGObject:(void *)fp8 bounds:(struct CGRect)fp12 bitsPerPixel:(unsigned int)fp28 options:(id)fp32;
- (id)initWithCGImage:(struct CGImage *)fp8 options:(id)fp12;
- (id)initWithPDFPage:(struct CGPDFPage *)fp8 options:(id)fp12;

@end

@interface QCGLTransformedImage : QCGLImage
{
    QCGLImage *_image;
    unsigned int _imageTimestamp;
    CIImage *_imageCI;
    struct CGAffineTransform _transform;
    float _matrix[16];
    void *_unused4[4];
}

- (id)initWithImage:(id)fp8 scaleX:(float)fp12 scaleY:(float)fp16 rotate:(float)fp20 translateX:(float)fp24 translateY:(float)fp28;
- (id)_image;
- (void)dealloc;

@end

@interface QCGLCVImage (Override)
- (BOOL)_createTexture;
- (void)_deleteTexture;
- (BOOL)_uploadTexture:(BOOL)fp8;
- (BOOL)_downloadTexture;
- (id)CIImage;
@end

@interface QCGLTextureImage (Override)
- (unsigned long)textureName;
@end

@interface QCGLCIImage (Override)
- (BOOL)_createTexture;
- (void)_deleteTexture;
- (BOOL)_uploadTexture:(BOOL)fp8;
- (BOOL)_downloadTexture;
- (id)CIImage;
@end

@interface QCGLCGImage (Override)
- (BOOL)_downloadTexture;
@end

@interface QCGLTransformedImage (CustomizedKeyValue)
- (id)valueForKey:(id)fp8;
- (void)addObserver:(id)fp8 forKeyPath:(id)fp12 options:(unsigned int)fp16 context:(void *)fp20;
- (void)removeObserver:(id)fp8 forKeyPath:(id)fp12;
@end

@interface QCGLTransformedImage (Override)
- (unsigned int)_timestamp;
- (void)didRegisterWithOpenGLContext;
- (void)willUnregisterFromOpenGLContext;
- (const float *)textureMatrix;
- (void)_setBuffer:(void *)fp8 rowBytes:(unsigned int)fp12 format:(unsigned long)fp16 type:(unsigned long)fp20 releaseCallback:(void *)fp24 userInfo:(void *)fp28;
- (void *)_bufferAddress;
- (unsigned int)_bufferRowBytes;
- (unsigned long)_bufferFormat;
- (unsigned long)_bufferType;
- (unsigned int)_bufferPixelComponents;
- (unsigned int)_bufferPixelSize;
- (BOOL)_createTexture;
- (void)_deleteTexture;
- (BOOL)_uploadTexture:(BOOL)fp8;
- (BOOL)_downloadTexture;
- (unsigned int)pixelsWide;
- (unsigned int)pixelsHigh;
- (float)pixelsAspectRatio;
- (unsigned long)textureTarget;
- (unsigned int)textureMipmapLevels;
- (BOOL)flipped;
- (id)rawData;
- (unsigned long)textureName;
- (id)CIImage;
- (struct CGImage *)CGImage;
- (int)_baseType;
- (const float *)_baseTextureMatrix;
- (unsigned long)_baseTextureName;
@end

@interface QCGLPBufferImage : QCGLImage
{
    QCPBuffer *_pBuffer;
    void *_unused4[4];
}

- (id)initWithPBuffer:(id)fp8 options:(id)fp12;
- (void)dealloc;
- (void)willDrawInPBuffer;
- (void)didDrawInPBuffer;
- (id)_pBuffer;

@end

@interface QCGLDrawableImage : QCGLPBufferImage
{
    unsigned int _depthSize;
    unsigned int _stencilSize;
    unsigned int _accumSize;
    void *_unused5[4];
}

- (id)initWithPixelsWide:(unsigned int)fp8 pixelsHigh:(unsigned int)fp12 options:(id)fp16;
- (void)dealloc;
- (struct _CGLContextObject *)CGLContextObj;
- (struct _CGLPixelFormatObject *)CGLPixelFormatObj;
- (void)willUpdateDrawable;
- (void)didUpdateDrawable;

@end

@interface QCGLBitmapImage : QCGLImage
{
    void *_unused4[4];
}

- (id)initWithBuffer:(void *)fp8 bytesPerRow:(unsigned int)fp12 format:(unsigned long)fp16 type:(unsigned long)fp20 pixelsWide:(unsigned int)fp24 pixelsHigh:(unsigned int)fp28 releaseCallback:(void *)fp32 callbackUserInfo:(void *)fp36 options:(id)fp40;
- (void *)buffer;
- (unsigned int)bytesPerRow;
- (void)willChangeBytes;
- (void)didChangeBytes;

@end

@interface QCGLDrawableImage (Override)
- (void)didRegisterWithOpenGLContext;
- (void)willUnregisterFromOpenGLContext;
@end

@interface QCGLPBufferImage (Override)
- (BOOL)_uploadTexture:(BOOL)fp8;
- (BOOL)_downloadTexture;
@end

@interface QCGLBitmapImage (Override)
- (BOOL)_downloadTexture;
@end

@interface QCGLTransformedImage (NSImage)
- (id)NSImage;
@end

@interface QCGLImage (NSImage)
+ (Class)valueClass;
- (id)NSImage;
- (id)value;
@end

@interface QCGLImagePort (NSImage)
- (BOOL)acceptValuesOfClass:(Class)fp8;
- (BOOL)setValue:(id)fp8;
@end

@interface QCGLCGImage (NSImage)
- (id)initWithNSImage:(id)fp8 options:(id)fp12;
@end

@interface NSImage (QCGLImagePort)
- (id)_bitmapRepresentation;
- (struct CGImage *)_cgRepresentation;
@end

@interface NSBitmapImageRep (QCGLImagePort)
- (struct CGImage *)_createCGImageFromMeshedData;
- (struct CGImage *)_createCGImageFromPlanarData;
- (struct CGImage *)_createCGImage;
@end

@interface QCImageDimensions : QCPatch
{
    QCGLImagePort *inputImage;
    QCNumberPort *outputWidth;
    QCNumberPort *outputHeight;
    QCIndexPort *outputPixelsWide;
    QCIndexPort *outputPixelsHigh;
    QCNumberPort *outputRatio;
}

+ (BOOL)allowsSubpatches;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCImageLoader : QCImagePatch
{
    QCGLImagePort *outputImage;
    NSData *_imageData;
    BOOL _ignoreAlpha;
}

+ (id)imageFileExtensions;
+ (id)imageFileTypes;
+ (BOOL)allowsSubpatches;
- (void)dealloc;
- (id)imageOptionsWithScalingMode:(id)fp8 flipped:(BOOL)fp12;
- (id)image;
- (void)resetImage;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)imageData;
- (void)setImageData:(id)fp8;
- (BOOL)ignoresImageAlpha;
- (void)setIgnoresImageAlpha:(BOOL)fp8;
- (id)setup:(id)fp8;

@end

@interface QCImageLoaderUI : QCImagePatchUI
{
    QCFileImageView *imageView;
    NSButton *alphaButton;
}

+ (id)viewNibName;
- (void)didLoadNib;
- (void)_updatePreview;
- (void)setupViewForPatch:(id)fp8;
- (void)_importFile:(id)fp8;
- (void)export:(id)fp8;
- (void)import:(id)fp8;
- (void)reset:(id)fp8;
- (void)updateAlpha:(id)fp8;

@end

@interface QCImageLoader (File)
+ (BOOL)canInstantiateWithFile:(id)fp8;
+ (id)instantiateWithFile:(id)fp8;
@end

@interface QCImageLoader (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCImageMatrix : QCPatch
{
    QCGLImagePort *inputImage;
    QCNumberPort *inputScaleX;
    QCNumberPort *inputScaleY;
    QCNumberPort *inputRotate;
    QCNumberPort *inputTranslateX;
    QCNumberPort *inputTranslateY;
    QCGLImagePort *outputImage;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCCheckBoardImage : QCPatch
{
    QCNumberPort *inputAnisotropy;
    QCGLImagePort *outputImage;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCPlasmaImage : QCImagePatch
{
    QCBooleanPort *inputSaturate;
    QCNumberPort *inputScale;
    QCNumberPort *inputX;
    QCNumberPort *inputY;
    QCNumberPort *inputAmplitude;
    QCColorPort *inputColorStart;
    QCColorPort *inputColorMiddle;
    QCColorPort *inputColorEnd;
    QCGLImagePort *outputImage;
    unsigned int _clut[256];
    char *_bufferAddress;
    unsigned int _bufferRowBytes;
}

+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (id)image;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;
- (void)setTarget:(unsigned long)fp8 width:(unsigned int)fp12 height:(unsigned int)fp16 mipmapLevels:(unsigned int)fp20;

@end

@interface QCBillboardUI : QCInspector
{
    NSButton *ciButton;
    NSButton *alignedButton;
    NSButton *squareButton;
    NSBox *infoBox;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)update:(id)fp8;

@end

@interface QCBillboard (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCPlasmaImageUI : QCImagePatchUI
{
}

+ (id)viewNibName;

@end

@interface QCPlasmaImage (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCFlameImage : QCImagePatch
{
    QCColorPort *inputColorStart;
    QCColorPort *inputColorMiddle;
    QCColorPort *inputColorEnd;
    QCGLImagePort *outputImage;
    unsigned int _clut[256];
    char *_bufferAddress;
    unsigned int _bufferRowBytes;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)image;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;
- (void)setTarget:(unsigned long)fp8 width:(unsigned int)fp12 height:(unsigned int)fp16 mipmapLevels:(unsigned int)fp20;

@end

@interface QCFlameImageUI : QCImagePatchUI
{
}

+ (id)viewNibName;

@end

@interface QCFlameImage (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCRenderInImage : QCImagePatch
{
    QCGLImagePort *outputImage;
    QCOpenGLContext *_context;
    QCDrawable *_drawable;
}

+ (int)executionMode;
- (id)image;
- (void)_updateImage:(float)fp8;
- (BOOL)_computeActualWidth:(unsigned int *)fp8 height:(unsigned int *)fp12;
- (void)resetImage;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;

@end

@interface QCRenderInImageUI : QCImagePatchUI
{
}

+ (id)viewNibName;

@end

@interface QCRenderInImage (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCImageFilterUI : QCImagePatchUI
{
}

+ (id)viewNibName;

@end

@interface QCImageFilter (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCDirectoryScanner : QCThreadPatch
{
    QCStringPort *inputPath;
    QCBooleanPort *inputSignal;
    QCStructurePort *outputFiles;
    QCBooleanPort *outputSignal;
    BOOL _recursive;
    BOOL _lastSignal;
    BOOL _rerun;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (void)setRecursive:(BOOL)fp8;
- (BOOL)recursive;
- (id)setup:(id)fp8;
- (void)_folderThread:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;

@end

@interface QCDirectoryScannerUI : QCInspector
{
    NSButton *recursiveButton;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)updateRecursive:(id)fp8;

@end

@interface QCDirectoryScanner (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCSpotlight : QCThreadPatch
{
    QCStringPort *inputQuery;
    QCBooleanPort *inputSignal;
    QCStructurePort *outputFiles;
    QCBooleanPort *outputSignal;
    BOOL _lastSignal;
    BOOL _rerun;
    BOOL _gathering;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)setup:(id)fp8;
- (void)__finish:(id)fp8;
- (void)_matadorThread:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;

@end

@interface QCTextImage : QCImagePatch
{
    QCStringPort *inputString;
    QCStringPort *inputFontName;
    QCNumberPort *inputGlyphSize;
    QCNumberPort *inputLeading;
    QCNumberPort *inputKerning;
    QCNumberPort *inputWidth;
    QCNumberPort *inputHeight;
    QCGLImagePort *outputImage;
    QCNumberPort *outputWidth;
    QCNumberPort *outputHeight;
    QCIndexPort *outputLineCount;
    QCIndexPort *outputGlyphCount;
    BOOL _pixelUnits;
    QCTextRenderer *_renderer;
    QCGLBitmapImage *_cacheImage;
    struct CGContext *_cacheContext;
}

+ (unsigned int)stateVersion;
+ (BOOL)allowsSubpatches;
- (id)image;
- (void)_clearCache;
- (void)resetImage;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (void)setFontName:(id)fp8;
- (void)setUsePixels:(BOOL)fp8;
- (BOOL)usePixels;
- (void)setHorizontalAlignment:(int)fp8;
- (int)horizontalAlignment;
- (void)setVerticalAlignment:(int)fp8;
- (int)verticalAlignment;

@end

@interface QCTextImageUI : QCImagePatchUI
{
    NSMatrix *layoutMatrix;
    NSPopUpButton *fontMenu;
    NSPopUpButton *alignmentHMenu;
    NSPopUpButton *alignmentVMenu;
}

+ (id)viewNibName;
- (void)didLoadNib;
- (void)_updateText:(id)fp8;
- (void)setupViewForPatch:(id)fp8;
- (void)updateLayout:(id)fp8;
- (void)updateFont:(id)fp8;
- (void)updateAttributes:(id)fp8;

@end

@interface QCTextImage (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCStringFormat : QCPatch
{
    NSString *_format;
    int _mode;
    NSArray *_formatComponents;
    QCStringPort *_stringPort;
    NSMutableArray *_stringPorts;
}

+ (BOOL)allowsSubpatches;
- (void)setFormat:(id)fp8;
- (id)format;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (id)state;
- (BOOL)setState:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCStringFormatUI : QCInspector
{
    NSTextField *formatField;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)updateFormat:(id)fp8;

@end

@interface QCStringFormat (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCTimeLoop : QCPatch
{
    QCIndexPort *inputCount;
    QCInterpolationPort *inputInterpolation;
    QCNumberPort *inputStart;
    QCNumberPort *inputEnd;
}

+ (int)executionMode;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCStructureCount : QCPatch
{
    QCStructurePort *inputStructure;
    QCIndexPort *outputCount;
}

+ (BOOL)allowsSubpatches;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCStructureMember : QCPatch
{
    QCStructurePort *inputStructure;
    QCVirtualPort *outputMember;
    QCPort *_inPort;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCImageDownloader : QCImageLoader
{
    QCStringPort *inputURL;
    QCBooleanPort *outputSignal;
    BOOL _useCache;
    NSString *_scalingMode;
    BOOL _rerun;
    NSURL *_imageURL;
}

+ (int)executionMode;
- (id)initWithIdentifier:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)scalingMode;
- (void)setScalingMode:(id)fp8;
- (BOOL)usesCache;
- (void)setUsesCache:(BOOL)fp8;
- (void)resetImage;
- (id)setup:(id)fp8;
- (void)_imageThread:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;

@end

@interface QCImageDownloaderUI : QCImagePatchUI
{
    NSPopUpButton *scaleMenu;
    NSButton *cacheButton;
    NSButton *alphaButton;
}

+ (id)viewNibName;
- (void)setupUI:(id)fp8;
- (void)setupViewForPatch:(id)fp8;
- (void)updateScaling:(id)fp8;
- (void)updateCache:(id)fp8;
- (void)updateAlpha:(id)fp8;

@end

@interface QCImageDownloader (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCInterpolationUI : QCInspector
{
    NSMatrix *interpolationMatrix;
    QCSplineView *splineView;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)resetView;
- (void)updateInterpolation:(id)fp8;

@end

@interface QCSplineView : NSView
{
    NSTextField *timeField;
    NSTextField *valueField;
    QCInterpolation *_spline;
    int _selectedIndex;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)finalize;
- (void)dealloc;
- (void)__stateUpdated:(id)fp8;
- (void)setPatch:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)isOpaque;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)canBecomeKeyView;
- (void)drawRect:(struct _NSRect)fp8;
- (void)updateControls;
- (void)updateControlPoint:(id)fp8;
- (void)deleteBackward:(id)fp8;
- (void)moveLeft:(id)fp8;
- (void)moveRight:(id)fp8;
- (void)moveUp:(id)fp8;
- (void)moveDown:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)delete:(id)fp8;
- (void)paste:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)duplicate:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;

@end

@interface QCInterpolation (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface GFSettingsView : NSView
{
    NSView *_insideView;
    NSTableView *_tableView;
    NSCell *_keyCell;
    NSTextFieldCell *_stringCell;
    NSTextFieldCell *_integerCell;
    NSTextFieldCell *_floatingCell;
    NSButtonCell *_booleanCell;
    NSPopUpButtonCell *_menuCell;
    GFList *_defaults;
    id _delegate;
}

- (void)_finish_initialization;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)setDefaults:(id)fp8;
- (id)defaults;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (void)reloadSettings;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)keyDown:(id)fp8;
- (id)_defaults;

@end

@interface GFSettingsColumn : NSTableColumn
{
}

- (id)dataCellForRow:(int)fp8;

@end

@interface GFSettingsView (TableViewSource)
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (id)_cellForRow:(int)fp8;
@end

@interface QCKeyboard : QCPatch
{
    unsigned int _keyCount;
    unsigned short _keyList[64];
    QCBooleanPort *_keyPortList[64];
}

+ (id)stringWithKey:(unsigned short)fp8;
+ (int)executionMode;
+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (unsigned int)keyCount;
- (unsigned short *)keyList;
- (BOOL)addKey:(unsigned short)fp8;
- (void)removeKey:(unsigned short)fp8;
- (id)initWithIdentifier:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCKeyboardUI : QCInspector
{
    QCKeyboardTableView *tableView;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)addKey:(id)fp8;
- (void)removeKey:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;

@end

@interface QCKeyboardTableView : QCTableView
{
}

- (id)_fieldEditor;

@end

@interface QCTextView : NSTextView
{
}

+ (id)sharedInstance;
- (void)_windowDidResignKeyNotification:(id)fp8;
- (void)keyDown:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;

@end

@interface QCKeyboard (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCStringCase : QCPatch
{
    QCStringPort *inputString;
    QCIndexPort *inputMode;
    QCStringPort *outputString;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCStringTimecode : QCPatch
{
    QCNumberPort *inputTime;
    QCStringPort *outputString;
}

+ (BOOL)allowsSubpatches;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCIterator : QCPatch
{
    QCIndexPort *inputCount;
    unsigned int _currentIndex;
}

+ (int)executionMode;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCIteratorVariables : QCPatch
{
    QCIndexPort *outputIndex;
    QCNumberPort *outputPosition;
    QCIndexPort *outputCount;
}

+ (BOOL)allowsSubpatches;
- (BOOL)_execute:(double)fp8 arguments:(id)fp16;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCStringCompare : QCPatch
{
    QCStringPort *inputString1;
    QCStringPort *inputString2;
    QCIndexPort *outputResult;
}

+ (BOOL)allowsSubpatches;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCSphere : QCPatch
{
    QCNumberPort *inputX;
    QCNumberPort *inputY;
    QCNumberPort *inputZ;
    QCNumberPort *inputRX;
    QCNumberPort *inputRY;
    QCNumberPort *inputRZ;
    QCNumberPort *inputScale;
    QCGLPort_Color *inputColor;
    QCGLPort_Image *inputImage;
    QCGLPort_Blending *inputBlending;
    QCGLPort_ZBuffer *inputZBuffer;
    QCGLPort_Culling *inputCulling;
    unsigned int _numSlices;
    unsigned int _numStacks;
    unsigned int _displayListID;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (unsigned int)numSlices;
- (void)setNumSlices:(unsigned int)fp8;
- (unsigned int)numStacks;
- (void)setNumStacks:(unsigned int)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;

@end

@interface QCSphereUI : QCInspector
{
    NSTextField *slicesField;
    NSTextField *stacksField;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)update:(id)fp8;

@end

@interface QCSphere (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCInfo : QCPatch
{
    QCNumberPort *outputVersion;
}

+ (BOOL)allowsSubpatches;
- (id)setup:(id)fp8;

@end

@interface QCStringTruncate : QCPatch
{
    QCStringPort *inputString;
    QCIndexPort *inputDirection;
    QCIndexPort *inputMode;
    QCIndexPort *inputMax;
    QCStringPort *inputToken;
    QCStringPort *outputString;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCGradientUI : QCInspector
{
    NSButton *depthButton;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)update:(id)fp8;

@end

@interface QCGradient (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCTrackBallUI : QCInspector
{
    NSSlider *sensibilitySlider;
    NSButton *autorotationButton;
    NSSlider *inertiaSlider;
    NSSlider *frictionSlider;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)updateTracking:(id)fp8;
- (void)updateAutorotation:(id)fp8;

@end

@interface QCTrackBall (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCImageKernel : QCProgrammablePatch
{
    QCGLImagePort *outputImage;
    BOOL _autoDOD;
    CIKernel *_ciKernel;
    CIFilter *_ciFilter;
    NSMutableArray *_argumentCache;
}

+ (BOOL)allowsSubpatches;
+ (id)sourceTypes;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (id)compileSourceOfType:(id)fp8;
- (void)setAutoDOD:(BOOL)fp8;
- (BOOL)autoDOD;
- (id)state;
- (BOOL)setState:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;

@end

@interface QCImageKernelUI : QCInspector
{
    QCSourceTextView *sourceView;
    NSButton *dodButton;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)resetView;
- (void)updateDOD:(id)fp8;

@end

@interface QCImageKernel (File)
+ (BOOL)canInstantiateWithFile:(id)fp8;
+ (id)instantiateWithFile:(id)fp8;
@end

@interface QCImageKernel (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCImageAccumulator : QCImagePatch
{
    QCBooleanPort *inputAccumulate;
    QCGLImagePort *inputImage;
    QCNumberPort *inputDirtyOriginX;
    QCNumberPort *inputDirtyOriginY;
    QCNumberPort *inputDirtyWidth;
    QCNumberPort *inputDirtyHeight;
    QCGLImagePort *outputImage;
    int _accumulatorFormat;
    BOOL _continuous;
    CIImageAccumulator *_accumulator;
    NSDictionary *_cachedOptions;
}

+ (BOOL)allowsSubpatches;
- (id)initWithIdentifier:(id)fp8;
- (BOOL)isOutput:(id)fp8 dependentFromInput:(id)fp12;
- (void)_setTimebase:(int)fp8;
- (BOOL)_computeActual:(id)fp8 width:(unsigned int *)fp12 height:(unsigned int *)fp16;
- (BOOL)_createAccumulator:(id)fp8;
- (id)image;
- (void)resetImage;
- (int)accumulatorFormat;
- (void)setAccumulatorFormat:(int)fp8;
- (BOOL)isContinuous;
- (void)setIsContinuous:(BOOL)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;

@end

@interface QCImageAccumulatorUI : QCImagePatchUI
{
    NSPopUpButton *formatMenu;
    NSButton *continuousButton;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)updateFormat:(id)fp8;
- (void)updateContinuous:(id)fp8;

@end

@interface QCImageAccumulator (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCTablet : QCPatch
{
    QCNumberPort *outputX;
    QCNumberPort *outputY;
    QCNumberPort *outputTiltX;
    QCNumberPort *outputTiltY;
    QCNumberPort *outputPressure;
    QCBooleanPort *outputTipButton;
    QCBooleanPort *outputLowerButton;
    QCBooleanPort *outputUpperButton;
}

+ (int)executionMode;
+ (int)timeMode;
+ (BOOL)allowsSubpatches;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCSystemTime : QCPatch
{
    QCNumberPort *outputTime;
}

+ (int)executionMode;
+ (BOOL)allowsSubpatches;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCDateFormatter : QCPatch
{
    QCNumberPort *inputTime;
    QCStringPort *outputString;
    NSString *_zoneName;
    int _dateStyle;
    int _timeStyle;
    NSString *_format;
    double _lastTime;
    double _resolution;
    struct __CFDateFormatter *_formatter;
}

+ (BOOL)allowsSubpatches;
+ (id)timeZoneNames;
- (id)initWithIdentifier:(id)fp8;
- (id)state;
- (BOOL)setState:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;
- (void)setTimeZoneName:(id)fp8;
- (id)timeZoneName;
- (void)setDateStyle:(int)fp8;
- (int)dateStyle;
- (void)setTimeStyle:(int)fp8;
- (int)timeStyle;
- (void)setFormatString:(id)fp8;
- (id)formatString;

@end

@interface QCDateFormatterUI : QCInspector
{
    NSButton *zoneButton;
    NSPopUpButton *zoneMenu;
    NSPopUpButton *dateMenu;
    NSPopUpButton *timeMenu;
    NSTextField *formatField;
}

+ (id)viewNibName;
- (void)didLoadNib;
- (void)_configureFormatEditor;
- (void)setupViewForPatch:(id)fp8;
- (void)update:(id)fp8;

@end

@interface QCDateFormatter (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCGLSLShader : QCProgrammablePatch
{
    BOOL _softwareMode;
    void *_vertexShader;
    void *_fragmentShader;
    void *_shader;
    BOOL _shaderValid;
    BOOL _updateAllUniforms;
}

+ (int)executionMode;
+ (id)sourceTypes;
- (void)_createShaders:(struct _CGLContextObject *)fp8;
- (void)_destroyShaders:(struct _CGLContextObject *)fp8;
- (id)initWithIdentifier:(id)fp8;
- (void)finalize;
- (void)dealloc;
- (id)_compileShader:(void *)fp8 withSource:(id)fp12 onContext:(struct _CGLContextObject *)fp16;
- (BOOL)_linkShaderOnContext:(struct _CGLContextObject *)fp8;
- (void)_loadShaders:(struct _CGLContextObject *)fp8;
- (id)compileSourceOfType:(id)fp8;
- (id)setup:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;
- (void)cleanup:(id)fp8;

@end

@interface GLSLParameterInfo : QCParameterInfo
{
    int location;
}

+ (id)infoWithType:(int)fp8 size:(unsigned int)fp12 location:(long)fp16;
- (BOOL)isEqualTo:(id)fp8;

@end

@interface QCGLSLShaderUI : QCInspector
{
    QCSourceTextView *vertexView;
    QCSourceTextView *fragmentView;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)resetView;

@end

@interface QCGLSLShader (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCMathematicalExpression : NSObject
{
    void *_interpreter;
}

+ (double)evaluateString:(id)fp8;
- (id)init;
- (id)initWithString:(id)fp8 error:(id *)fp12;
- (void)finalize;
- (void)dealloc;
- (id)variables;
- (void)setVariable:(double)fp8 atIndex:(unsigned int)fp16;
- (double)variableAtIndex:(unsigned int)fp8;
- (double)evaluate;

@end

@interface QCExpression : QCProgrammablePatch
{
    QCNumberPort *outputResult;
    QCMathematicalExpression *_evaluator;
}

+ (BOOL)allowsSubpatches;
+ (id)sourceTypes;
- (id)initWithIdentifier:(id)fp8;
- (void)dealloc;
- (void)setSource:(id)fp8 ofType:(id)fp12;
- (id)compileSourceOfType:(id)fp8;
- (BOOL)execute:(id)fp8 time:(double)fp12 arguments:(id)fp20;

@end

@interface QCExpressionUI : QCInspector
{
    QCSourceTextView *expressionView;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)resetView;

@end

@interface QCExpression (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCScreenInfoUI : QCInspector
{
    NSButton *fullButton;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)update:(id)fp8;

@end

@interface QCScreenInfo (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface CIFilter
{
}
@end

@interface QCFilter_Emboss : CIFilter
{
    CIImage *inputImage;
    CIImage *inputEnvironmentMap;
    NSNumber *inputRoundness;
    NSNumber *inputBearing;
    NSNumber *inputElevation;
    NSNumber *inputBrightness;
    NSNumber *inputReflection;
    NSNumber *inputSurfaceScale;
    CIColor *inputColor;
}

+ (id)filterWithName:(id)fp8;
- (id)init;
- (struct CGRect)mapROI:(int)fp8 forRect:(struct CGRect)fp12;
- (id)outputImage;
- (id)customAttributes;

@end

@interface QCFilter_RectangleGenerator : CIFilter
{
    CIColor *inputColor;
    CIVector *inputRectangle;
    NSNumber *inputEdgeBlur;
}

+ (id)filterWithName:(id)fp8;
- (id)init;
- (id)outputImage;
- (id)customAttributes;

@end

@interface QCPortTooltipView : GFTooltipView
{
    QCPort *_port;
    unsigned int _timestamp;
    NSView *_extensionView;
    NSTimer *_timer;
    struct _NSSize _baseSize;
    NSString *_valueString;
}

+ (id)valueTextAttributes;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)_timer:(id)fp8;
- (void)_startRendering:(id)fp8;
- (void)_stopRendering:(id)fp8;
- (id)initWithPort:(id)fp8;
- (void)_finalize_QCPortTooltipView;
- (void)finalize;
- (void)dealloc;
- (void)setString:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)refresh:(BOOL)fp8;

@end

@interface QCVirtualPort (Tooltip)
- (id)tooltipString;
@end

@interface QCStructurePort (Tooltip)
- (void)_printStructure:(id)fp8 toString:(id)fp12 linePrefix:(id)fp16;
- (id)tooltipString;
@end

@interface QCGLImagePort (Tooltip)
- (id)tooltipString;
- (id)tooltipExtensionView;
- (struct _NSSize)tooltipExtensionViewSize:(id)fp8;
- (void)drawPortView:(id)fp8;
@end

@interface QCColorPort (Tooltip)
- (id)tooltipString;
- (id)tooltipExtensionView;
- (struct _NSSize)tooltipExtensionViewSize:(id)fp8;
- (void)drawPortView:(id)fp8;
@end

@interface QCStringPort (Tooltip)
- (id)tooltipString;
@end

@interface QCBooleanPort (Tooltip)
- (id)tooltipString;
@end

@interface QCIndexPort (Tooltip)
- (id)tooltipString;
@end

@interface QCNumberPort (Tooltip)
- (id)tooltipString;
@end

@interface QCProxyPort (Tooltip)
- (id)tooltipString;
- (id)tooltipExtensionView;
- (struct _NSSize)tooltipExtensionViewSize:(id)fp8;
@end

@interface QCPort (QCPortView)
- (void)drawPortView:(id)fp8;
@end

@interface QCPort (Tooltip)
- (id)tooltipString;
- (id)tooltipExtensionView;
- (struct _NSSize)tooltipExtensionViewSize:(id)fp8;
@end

@interface QCPatchActor (Tooltip)
- (id)_tooltipViewForPort:(id)fp8;
- (id)setupTooltipViewForPoint:(struct _NSPoint)fp8 inNode:(id)fp16 bounds:(struct _NSRect)fp20 tooltipBounds:(struct _NSRect *)fp36;
- (void)resetTooltipView;
@end


@interface QCClearUI : QCInspector
{
    NSButton *colorButton;
    NSButton *depthButton;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)update:(id)fp8;

@end

@interface QCClear (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCLightingUI : QCInspector
{
    NSButton *twoSideButton;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)addLight:(id)fp8;
- (void)removeLight:(id)fp8;
- (void)update:(id)fp8;

@end

@interface QCLighting (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCMathUI : QCInspector
{
}

+ (id)viewNibName;
- (void)addOperation:(id)fp8;
- (void)removeOperation:(id)fp8;

@end

@interface QCMath (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCMultiplexerUI : QCInspector
{
    NSPopUpButton *classMenu;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)setClass:(id)fp8;
- (void)addPort:(id)fp8;
- (void)removePort:(id)fp8;

@end

@interface QCMultiplexer (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCOpenGLInfoUI : QCInspector
{
    QCTableView *tableView;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)addExtension:(id)fp8;
- (void)removeExtension:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;

@end

@interface QCOpenGLInfo (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCParticleSystemUI : QCInspector
{
    NSTextField *numField;
    NSTextField *delayField;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)updateNum:(id)fp8;
- (void)updateDelay:(id)fp8;

@end

@interface QCParticleSystem (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCRandomUI : QCInspector
{
    NSSlider *variabilitySlider;
    NSTextField *variabilityField;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)update:(id)fp8;

@end

@interface QCRandom (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCBonjourServicesUI : QCInspector
{
    NSComboBox *typeComboBox;
}

+ (id)viewNibName;
- (void)setupViewForPatch:(id)fp8;
- (void)updateType:(id)fp8;

@end

@interface QCBonjourServices (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end

@interface QCSplitterUI : QCInspector
{
    NSPopUpButton *classMenu;
    NSTextField *minField;
    NSTextField *maxField;
}

+ (id)viewNibName;
- (void)_setupUI:(id)fp8;
- (void)setupViewForPatch:(id)fp8;
- (void)setProperty:(id)fp8;

@end

@interface QCSplitter (QCInspector)
+ (Class)inspectorClassWithIdentifier:(id)fp8;
@end
