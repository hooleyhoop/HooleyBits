#Conditionals

#non-conditionals
-
    instruction: aaa
    name:
    ASCII Adjust After Addition",			// al = ASCII Adjust After Addition(al)
-
    instruction: aad
    name:
    ASCII Adjust AX Before Division",
-
    instruction: aam
    name:
-
    instruction: aas
    name:        
    ASCII Adjust AL After Subtraction",
-
    instruction: adcb
    name:        add
",		@"Add with Carry",
-
    instruction: adcl
    name:        add
    ",		@"Add with Carry",
-
    instruction: addb
    name:        add
    ",		@"Add",
-
    instruction: addw
    name:        add
    ",		@"Add",
-
    instruction: addl
    name:        add
    ",		@"Add",
-
    instruction: addpd
    name:    
    ",		@"Add Packed Double-Precision Floating-Point Values",
-
    instruction: addsd
    name:    
    ",		@"Add Scalar Double-Precision Floating-Point Values",
-
    instruction: addss
    name:    
    ",		@"Add Scalar Single-Precision Floating-Point Values",
-
    instruction: andb
    name:    
    ",		@"Logical AND",
-
    instruction: andw
    name:        
    ",		@"Logical AND",
-
    instruction: andl
    name:        
    ",		@"Logical AND",
-
    instruction: andnpd
    name:        
    ",		@"Bitwise Logical AND NOT of Packed Double-Precision Floating-Point Values",
-
    instruction: andnps
    name:        
    ",		@"Bitwise Logical AND NOT of Packed Single-Precision Floating-Point Values",
-
    instruction: andpd
    name:        
    ",		@"Bitwise Logical AND of Packed Double-Precision Floating-Point Values",
-
    instruction: andps
    name:        
    ",		@"Bitwise Logical AND of Packed Single-Precision Floating-Point Values",
-
    instruction: arpl
    name:        
    ",		@"Adjust RPL Field of Segment Selector",
-
    instruction: bound
    name:        
    ",		@"Check Array Index Against Bounds",
-
    instruction: boundl
    name:        
    ",		@"Check Array Index Against Bounds",
-
    instruction: bswap
    name:        
    ",		@"Byte Swap",
-
    instruction: call
    name:        
    ",		@"stack.push(%eip), jump($1)",
-
    instruction: calll
    name:        
    ",		@"stack.push(%eip), jump($1)",
-
    instruction: cbtw
    name:        
    ",		@"convert byte to word",
-
    instruction: clc
    name:        
    Clear Carry Flag",
-
    instruction: cld
    name:        
    Clear Direction Flag",
-
    instruction: cli
    name:        
    Clear Interrupt Flag",
-
    instruction: cltd
    name:        
    ",		@"",
-
    instruction: cmc
    name:        
    Complement Carry Flag",
-
    instruction: cmovaw
    name:        
    ",		@"Move if above (CF=0 and ZF=0)",
-
    instruction: cmoval",		@"Move if above (CF=0 and ZF=0)",
-
    instruction: cmovael",		@"Move if above or equal (CF=0)",
-
    instruction: cmovbl",		@"Move if below (CF=1)",
-
    instruction: cmovbel",		@"Move if below or equal (CF=1 or ZF=1)",
-
    instruction: cmovew",		@"move if equal (ZF=1)",
-
    instruction: cmovel",		@"move if equal (ZF=1)",
-
    instruction: cmovgel",		@"Move if greater or equal (SF=OF)",
-
    instruction: cmovgl",		@"Move if greater (ZF=0 and SF=OF)",
-
    instruction: cmovlew",		@"Move if less or equal (ZF=1 or SF<>OF)",
-
    instruction: cmovlel",		@"Move if less or equal (ZF=1 or SF<>OF)",
-
    instruction: cmovll",		@"Move if less (SF<>OF)",
-
    instruction: cmovnel",		@"Move if not equal (ZF=0)",
-
    instruction: cmovnew",		@"Move if not equal (ZF=0)",
-
    instruction: cmovnpl",		@"Move if not parity (PF=0)",
-
    instruction: cmovnsl",		@"Move if not sign (SF=0)",
-
    instruction: cmovsl",		@"Move if sign (SF=1)",
-
    instruction: cmpb",		@"Compare Two Operands",
-
    instruction: cmpw",		@"Compare Two Operands",
-
    instruction: cmpl",		@"Compare Two Operands",
-
    instruction: cmpss",		@"compare float",
-
    instruction: cmpsd",		@"compare double",
-
    instruction: cmpsl",		@"Compare String",
-
    instruction: cmpsb",		@"Compare String",							  
-

// The CMP instruction is typically used in conjunction with a conditional jump (Jcc), condition move (CMOVcc), or SETcc instruction. The condition codes used by the Jcc, CMOVcc, and SETcc instructions are based on the results of a CMP instruction. 

-
    instruction: cvtdq2pd",	@"Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values",
-
    instruction: cvtsd2ss",	@"Convert Scalar Double-Precision Floating-Point Value to Scalar Single-Precision Floating-Point Value",
-
    instruction: cvtsi2sd",	@"Convert Doubleword Integer to Scalar Double- Precision Floating-Point Value",
-
    instruction: cvtsi2ss",	@"Convert Doubleword Integer to Scalar Single- Precision Floating-Point Value",
-
    instruction: cvtss2sd",	@"Convert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value",
-
    instruction: cvttpd2dq",	@"Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers",
-
    instruction: cvttsd2si",	@"Convert with Truncation Scalar Double-Precision Floating-Point Value to Signed Doubleword Integer",
-
    instruction: cvttss2si",	@"Convert with Truncation Scalar Single-Precision Floating-Point Value to Doubleword Integer",
-
    instruction: cvttps2dq",	@"Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Doubleword Integers",
							  
-
    instruction: cwtl",		@"convert word to long",

-
    instruction: daa",			@"Decimal Adjust AL after Addition",
-
    instruction: das",			@"Decimal Adjust AL after Subtraction",							  
-
    instruction: decb",		@"decrement by 1",
-
    instruction: decw",		@"decrement by 1",							  
-
    instruction: decl",		@"decrement by 1",

-
    instruction: divl",		@"unsigned divide",
-
    instruction: divsd",		@"unsigned divide",
-
    instruction: divss",		@"unsigned divide",

-
    instruction: enter",		@"Make Stack Frame for Procedure Parameters",
							  
-
    instruction: fadd",		@"Add",
-
    instruction: faddl",		@"Add",
-
    instruction: faddp",		@"Add",
-
    instruction: fadds",		@"",
-
    instruction: fiaddl",		@"Add",
-
    instruction: fiadds",		@"Add",							  
-
    instruction: falc",		@"",				
-
    instruction: fchs",		@"Change Sign",
-
    instruction: fcomp",		@"Compare Floating Point Values",
-
    instruction: fcompl",		@"Compare Floating Point Values",
-
    instruction: fcoms",		@"Compare Floating Point Values",
-
    instruction: fdiv",		@"Divide",
-
    instruction: fdivp",		@"Divide",
-
    instruction: fdivr",		@"Reverse Divide",
-
    instruction: fdivrp",		@"Reverse Divide",
-
    instruction: ficompl",		@"Compare Integer",
-
    instruction: ficomps",		@"Compare Integer",
-
    instruction: ficoms",		@"Compare Integer",
-
    instruction: fildl",		@"Load Integer",			
-
    instruction: filds",		@"Load Integer",
-
    instruction: fildq",		@"Load Integer",
-
    instruction: fistpq",		@"Store Integer",							  
-
    instruction: fld1",		@"load constant",
-
    instruction: fldl",		@"load real",
-
    instruction: fld",			@"Load Floating Point Value",
-
    instruction: fldcwl",		@"Load x87 FPU Control Word",
-
    instruction: fldt",		@"",
-
    instruction: flds",		@"load real",
-
    instruction: fldz",		@"load constant",
-
    instruction: fmuls",		@"Multiply",
-
    instruction: fmul",		@"Multiply",
-
    instruction: fmulp",		@"Multiply",
-
    instruction: fmull",		@"",
-
    instruction: fnstcwl",		@"Store x87 FPU Control Word",
-
    instruction: fldcw",		@"Load x87 FPU Control Word",							  
-
    instruction: fnstcw",		@"Store x87 FPU Control Word",							  
-
    instruction: fstp",		@"Store Floating Point Value",
-
    instruction: fstpt",		@"",
-
    instruction: fsub",		@"Subtract",
-
    instruction: fsubp",		@"Subtract",
-
    instruction: fsubr",		@"Reverse Subtract",
-
    instruction: fsubrl",		@"",
-
    instruction: fsubrp",		@"Reverse Subtract",
-
    instruction: fstpl",		@"",
-
    instruction: fstps",		@"",
-
    instruction: fsts",		@"Store x87 FPU Status Word",
-
    instruction: fstl",		@"",		
-
    instruction: fucomi",		@"Compare Floating Point Values and Set EFLAGS",
-
    instruction: fucomip",		@"Compare Floating Point Values and Set EFLAGS",
-
    instruction: fxch",		@"Exchange Register Contents",

							  
-
    instruction: hlt",			@"halt",
							  
-
    instruction: idivl",		@"signed divide",
-
    instruction: imulb",		@"",							  
-
    instruction: imulw",		@"",
-
    instruction: imull",		@"multiply",
-
    instruction: inb",			@"",
-
    instruction: inl",			@"",
-
    instruction: int",			@"",
-
    instruction: into",		@"Call to Interrupt Procedure",
-
    instruction: iret",		@"Interrupt Return",
-
    instruction: incb",		@"",
-
    instruction: incl",		@"",
-
    instruction: incw",		@"",
-
    instruction: insb",		@"Input from Port to String",
-
    instruction: insl",		@"",
-
    instruction: invd",		@"Invalidate Internal Caches",
							  
-
    instruction: jmp",			@"jump",
-
    instruction: jmpl",		@"jump",
 
-
    instruction: ja",			@"Jump if Condition is Met - short if above",
-
    instruction: jal",			@"Jump if Condition is Met - short if above",
-
    instruction: jae",			@"Jump if Condition is Met - short if above or equal",
-
    instruction: jael",		@"Jump if Condition is Met - short if above or equal",
-
    instruction: jb",			@"Jump if Condition is Met - short if below",
-
    instruction: jbl",			@"Jump if Condition is Met - short if below",
-
    instruction: jbe",			@"Jump if Condition is Met - short if below or equal",
-
    instruction: jbel",		@"Jump if Condition is Met - short if below or equal",
-
    instruction: jcxz",		@"",							  
-
    instruction: je",			@"Jump if Condition is Met - short if equal",
-
    instruction: jel",			@"Jump if Condition is Met - short if equal",
-
    instruction: jg",			@"Jump if Condition is Met - short if greater",
-
    instruction: jgl",			@"Jump if Condition is Met - short if greater",
-
    instruction: jge",			@"Jump if Condition is Met - short if greater or equal",
-
    instruction: jgel",		@"Jump if Condition is Met - short if greater or equal",
-
    instruction: jl",			@"Jump if Condition is Met - short if less",
-
    instruction: jll",			@"Jump if Condition is Met - ",
-
    instruction: jle",			@"Jump if Condition is Met - short if less or equal",
-
    instruction: jlel",		@"Jump if Condition is Met - short if less or equal",
-
    instruction: jne",			@"Jump if Condition is Met - short if not equal",
-
    instruction: jnel",		@"Jump if Condition is Met - ",
-
    instruction: jno",			@"",
-
    instruction: jnp",			@"",				
-
    instruction: jnpl",		@"",
-
    instruction: jo",			@"",							  
-
    instruction: jns",			@"Jump if Condition is Met - short if not sign",
-
    instruction: jnsl",		@"Jump if Condition is Met - ",
-
    instruction: jp",			@"Jump if Condition is Met - short if parity",
-
    instruction: jpl",			@"Jump if Condition is Met - ",
-
    instruction: js",			@"Jump if Condition is Met - short if sign",
-
    instruction: jsl",			@"Jump if Condition is Met - ",

-
    instruction: lahf",		@"Load Status Flags into AH Register",
-
    instruction: lcall",		@"",
-
    instruction: lds",			@"Load Far Pointer",							  
-
    instruction: leal",		@"Load Effective address",
-
    instruction: leave",		@"High Level Procedure Exit",
-
    instruction: les",			@"Load Far Pointer",
-
    instruction: ljmp",		@"",
-
    instruction: ljmpl",		@"",
-
    instruction: lock/incl",	@"",
-
    instruction: lock/sbbb",		@"",
-
    instruction: lock/addb",		@"",
-
    instruction: lock/cmpxchgl",		@"",
-
    instruction: lock/pushl",		@"",
-
    instruction: lock/sbbl",		@"",
-
    instruction: lock/xaddl",		@"",
							  
-
    instruction: lodsb",		@"Load String",  
-
    instruction: lodsl",		@"",
-
    instruction: loop",		@"Loop According to ECX Counter",							  
-
    instruction: loopz",		@"",							  
-
    instruction: loopnz",		@"",
-
    instruction: lret",		@"",
							  
-
    instruction: maxsd",		@"Return Maximum Scalar Double-Precision Floating-Point Value",
-
    instruction: maxss",		@"Return Maximum Scalar Single-Precision Floating-Point Value",
-
    instruction: minsd",		@"Return Minimum Scalar Double-Precision Floating-Point Value",
-
    instruction: minss",		@"Return Minimum Scalar Single-Precision Floating-Point Value",

-
    instruction: movapd",		@"move aligned packed double precision float",
-
    instruction: movaps",		@"move aligned packed single precision float",

-
    instruction: movb",		@"move byte (8)",
-
    instruction: movw",		@"move word (16)",
-
    instruction: movl",		@"move long (32)",
-
    instruction: movd",		@"move double (64)",
							  
-
    instruction: movhpd",		@"Move High Packed Double-Precision Floating-Point Value",
							  
-
    instruction: movsb",		@"Move Data from String to String",
-
    instruction: movsw",		@"Move Data from String to String",
-
    instruction: movsl",		@"",							  
-
    instruction: movsd",		@"Move Data from String to String",
							  
-
    instruction: movss",		@"move scalar single precision float",
-
    instruction: movsbl",		@"move byte to long (sign extension)",
-
    instruction: movsbw",		@"move byte to word (sign extension)",
-
    instruction: movswl",		@"move word to long (sign extension)",
							  
-
    instruction: movzbl",		@"move byte to long (zero other bytes)",
-
    instruction: movzwl",		@"move word to long (zero other bytes)",

-
    instruction: movups",		@"Move Unaligned Packed Single-Precision Floating- Point Values",
					
-
    instruction: mulb",		@"",
-
    instruction: mulw",		@"",							  
-
    instruction: mull",		@"unsigned multiply",
-
    instruction: muld",		@"unsigned multiply",
							  
-
    instruction: mulss",		@"Multiply Scalar Single-Precision Floating-Point Values",
-
    instruction: mulsd",		@"Multiply Scalar Double-Precision Floating-Point Values",

-
    instruction: negb",		@"",							  
-
    instruction: negw",		@"",							  
-
    instruction: negl",		@"",
-
    instruction: nop",			@"no op",
-
    instruction: nopl",		@"",							  
-
    instruction: notl",		@"",
							  
-
    instruction: orb",			@"",
-
    instruction: orl",			@"",
-
    instruction: orpd",		@"Bitwise Logical OR of Double-Precision Floating-Point Values",
-
    instruction: orps",		@"Bitwise Logical OR of Single-Precision Floating-Point Values",
-
    instruction: orw",			@"",
-
    instruction: outb",		@"",
-
    instruction: outsb",		@"Output String to Port",
-
    instruction: outsl",		@"",
-
    instruction: outl",		@"",
							  
-
    instruction: paddd",		@"Add Packed Integers",
-
    instruction: popl",		@"",
-
    instruction: popfl",		@"",
-
    instruction: popf",		@"Pop Stack into EFLAGS Register",							  
-
    instruction: popal",		@"",							  
-
    instruction: por",			@"",
-
    instruction: psllq",		@"Shift Packed Data Left Logical",
-
    instruction: pslld",		@"Shift Packed Data Left Logical",
-
    instruction: punpckldq",	@"Unpack Low Data",
-
    instruction: pushal",		@"",
-
    instruction: push",		@"Push Word or Doubleword Onto the Stack",						  
-
    instruction: pushl",		@"stack.push()",
-
    instruction: pushfl",			@"",
-
    instruction: pushw",			@"",
-
    instruction: pushf",		@"Push EFLAGS Register onto the Stack",							  
-
    instruction: pxor",		@"Logical Exclusive OR",
							  
-
    instruction: rclb",		@"",		
-
    instruction: rcrl",		@"",

-
    instruction: rep/stosl",		@"Repeat while( ECX(--)>0 ) stosl",

-
    instruction: repz/addb",		@"Repeat while( ECX(--)>0 && ZF!=0 ) addb",							  
-
    instruction: repz/cmpsb",		@"Repeat while( ECX(--)>0 && ZF!=0 ) cmpsb",
-
    instruction: repz/addl",		@"Repeat while( ECX(--)>0 && ZF!=0 ) addl",
-
    instruction: repz/orb",		@"Repeat while( ECX(--)>0 && ZF!=0 ) orb",
-
    instruction: repz/pushl",		@"Repeat while( ECX(--)>0 && ZF!=0 ) pushl",	
							  
-
    instruction: repnz/addb",		@"Repeat while( ECX(--)>0 && ZF!=1 ) addb",


							  
-
    instruction: ret",			@"Return from Procedure",
-
    instruction: retl",		@"",
-
    instruction: rolb",		@"",				
-
    instruction: rolw",		@"",							  
-
    instruction: roll",		@"",
-
    instruction: rorb",		@"",
-
    instruction: rorl",		@"",	  
						
-
    instruction: sahf",		@"Store AH into Flags",
-
    instruction: sarb",		@"",
-
    instruction: sarl",		@"",
-
    instruction: sarw",		@"",
-
    instruction: sbbb",		@"",							  
-
    instruction: sbbw",		@"",
-
    instruction: sbbl",		@"",
-
    instruction: scasb",		@"Scan String",
-
    instruction: scasl",		@"",
							  
//	flags
//	CF = carryFlag
//	PF = parityFlag
//	AF = adjustFlag
//	ZF = zeroFlag
//	SF = signFlag
//	TF = trapFlag
//	IF = interruptEnableFlag
//	DF = directionFlag
//	OF = overflowFlag
							  
							  
-
    instruction: seta",		@"Set byte if above (CF=0 and ZF=0)",				// (CF==0 && ZF==0) ? $1=1 : $1=0
-
    instruction: setae",		@"Set byte if above or equal (CF=0)",				// (CF==0) ? $1=1 : $1=0
-
    instruction: setb",		@"Set byte if below (CF=1)",						// (CF==1) ? $1=1 : $1=0
-
    instruction: setbe",		@"Set byte if below or equal (CF=1 or ZF=1)",		// (CF==1 || ZF==1) ? $1=1 : $1=0
-
    instruction: sete",		@"Set byte if equal (ZF=1)",
-
    instruction: setg",		@"Set byte if greater (ZF=0 and SF=OF)",
-
    instruction: setge",		@"Set byte if greater or equal (SF=OF)",
-
    instruction: setl",		@"Set byte if less (SF<>OF)",
-
    instruction: setle",		@"Set byte if less or equal (ZF=1 or SF<>OF)",
-
    instruction: setne",		@"Set byte if not equal (ZF=0)",
-
    instruction: setnp",		@"Set byte if not parity (PF=0)",
-
    instruction: setp",		@"Set byte if parity (PF=1)",
							  
-
    instruction: shll",		@"",
-
    instruction: shlb",		@"", 
-
    instruction: shldl",		@"",
-
    instruction: shrb",		@"",
-
    instruction: shrdl",		@"",
-
    instruction: shrl",		@"",
-
    instruction: shrw",		@"",
-
    instruction: sldt",		@"Store Local Descriptor Table Register",					
-
    instruction: sldtl",		@"",
-
    instruction: sqrtss",		@"Compute Square Root of Scalar Single-Precision Floating-Point Value",							  
-
    instruction: sqrtsd",		@"Compute Square Root of Scalar Double-Precision Floating-Point Value",
							  
-
    instruction: std",			@"Set Direction Flag",
-
    instruction: stc",			@"Set Carry Flag",
-
    instruction: sti",			@"Set Interrupt Flag",
							  
-
    instruction: stos",		@"Store String",							  
-
    instruction: stosb",		@"Store String",
-
    instruction: stosw",		@"Store String",
-
    instruction: stosl",		@"Store String",
-
    instruction: stosd",		@"Store String",
							  
-
    instruction: subb",		@"Subtract",
-
    instruction: subw",		@"Subtract",
-
    instruction: subl",		@"Subtract",
-
    instruction: subss",		@"Subtract Scalar Single-Precision Floating-Point Values",
-
    instruction: subsd",		@"Subtract Scalar Double-Precision Floating-Point Values",
-
    instruction: subps",		@"Subtract Packed Single-Precision Floating-Point Values",
-
    instruction: subpd",		@"Subtract Packed Double-Precision Floating-Point Values",

-
    instruction: testb",		@"Logical Compare",
-
    instruction: testw",		@"Logical Compare",
-
    instruction: testl",		@"Logical Compare",
							  
-
    instruction: ucomisd",		@"Unordered Compare Scalar Double-Precision Floating- Point Values and Set EFLAGS",
-
    instruction: ucomiss",		@"Unordered Compare Scalar Single-Precision Floating- Point Values and Set EFLAGS",
						
-
    instruction: wait/addb",		@"",
-
    instruction: wait/addl",		@"",
-
    instruction: wait/sbbb",		@"",
							  
-
    instruction: xchg",		@"Exchange Register/Memory with Register",							  
-
    instruction: xchgb",		@"Exchange Register/Memory with Register",							  
-
    instruction: xchgl",		@"Exchange Register/Memory with Register",
							  
-
    instruction: xlat",		@"Table Look-up Translation",
							  
-
    instruction: xorb",		@"Logical Exclusive OR",
-
    instruction: xorw",		@"Logical Exclusive OR",
-
    instruction: xorl",		@"Logical Exclusive OR",
-
    instruction: xord",		@"Logical Exclusive OR",
							  
-
    instruction: xorps",		@"Bitwise Logical XOR for Single-Precision Floating-Point Values",
-
    instruction: xorpd",		@"Bitwise Logical XOR for Double-Precision Floating-Point Values",
